a:5:{s:2:"id";s:8:"35094771";s:4:"info";a:4:{s:6:"Title:";s:18:"Using runProcessor";s:7:"Author:";s:15:"Shaun McCormick";s:16:"Last Changed by:";s:15:"Shaun McCormick";s:12:"Wiki Markup:";s:33:"[revolution20:Using runProcessor]";}s:6:"parent";s:8:"18678466";s:6:"source";s:1963:"{note}The usage of runProcessor described here only work in Revolution 2.0.8 and later. Users prior to that will have to use the deprecated [executeProcessor|modX.executeProcessor] method.{note}

{toc}

h2. Using runProcessor

MODX has a specific method that allows you to run processors straight from any PHP file, such as a [Plugin|Plugins], [Snippet|Snippets] or externally. This can be done with the following syntax:

{quote}$response = $modx-&gt;runProcessor(&#39;action/path/to/processor&#39;,$arrayOfProperties,$otherOptions);{quote}

This will then execute the specified processor and return a modProcessorResponse object, that contains the response from the processor. That can then be checked to see if the process was a success or failure. The first parameter, or action, is the path to the processor (without the file extension) from the core/model/modx/processors/ directory (This directory can also be overridden in the 3rd parameter array with the param &#39;processors_path&#39;). 

For example, this code creates a new Chunk:

{code}
$response = $modx-&gt;runProcessor(&#39;element/chunk/create&#39;,array(
   &#39;name&#39; =&gt; &#39;NewChunk&#39;,
   &#39;description&#39; =&gt; &#39;A test Chunk made with runProcessor.&#39;,
   &#39;snippet&#39; =&gt; &#39;&lt;h3&gt;Chunkify!&lt;/h3&gt;&#39;,
));
if ($response-&gt;isError()) {
    return $response-&gt;getMessage();
}
$chunkArray = $response-&gt;getObject();
return &#39;The chunk &quot;&#39;.$chunkArray[&#39;name&#39;].&#39; was created with ID &#39;.$chunkArray[&#39;id&#39;];{code}

This block of code runs the &#39;element/chunk/create&#39; processor, checks to see if it was successful (with isError()), and if so, returns a message saying the ID and the name of the new Chunk. Note that getObject returns an *array* of the object that is returned by the processor. getMessage will return any message sent back from the processor.

h2. See Also

{pagetree:root=Advanced Development}";s:8:"versions";a:1:{i:0;a:3:{s:2:"id";s:8:"35094771";s:3:"ver";s:1:"1";s:4:"code";s:1963:"{note}The usage of runProcessor described here only work in Revolution 2.0.8 and later. Users prior to that will have to use the deprecated [executeProcessor|modX.executeProcessor] method.{note}

{toc}

h2. Using runProcessor

MODX has a specific method that allows you to run processors straight from any PHP file, such as a [Plugin|Plugins], [Snippet|Snippets] or externally. This can be done with the following syntax:

{quote}$response = $modx-&gt;runProcessor(&#39;action/path/to/processor&#39;,$arrayOfProperties,$otherOptions);{quote}

This will then execute the specified processor and return a modProcessorResponse object, that contains the response from the processor. That can then be checked to see if the process was a success or failure. The first parameter, or action, is the path to the processor (without the file extension) from the core/model/modx/processors/ directory (This directory can also be overridden in the 3rd parameter array with the param &#39;processors_path&#39;). 

For example, this code creates a new Chunk:

{code}
$response = $modx-&gt;runProcessor(&#39;element/chunk/create&#39;,array(
   &#39;name&#39; =&gt; &#39;NewChunk&#39;,
   &#39;description&#39; =&gt; &#39;A test Chunk made with runProcessor.&#39;,
   &#39;snippet&#39; =&gt; &#39;&lt;h3&gt;Chunkify!&lt;/h3&gt;&#39;,
));
if ($response-&gt;isError()) {
    return $response-&gt;getMessage();
}
$chunkArray = $response-&gt;getObject();
return &#39;The chunk &quot;&#39;.$chunkArray[&#39;name&#39;].&#39; was created with ID &#39;.$chunkArray[&#39;id&#39;];{code}

This block of code runs the &#39;element/chunk/create&#39; processor, checks to see if it was successful (with isError()), and if so, returns a message saying the ID and the name of the new Chunk. Note that getObject returns an *array* of the object that is returned by the processor. getMessage will return any message sent back from the processor.

h2. See Also

{pagetree:root=Advanced Development}";}}}