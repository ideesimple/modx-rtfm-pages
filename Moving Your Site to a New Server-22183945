a:5:{s:2:"id";s:8:"22183945";s:4:"info";a:4:{s:6:"Title:";s:32:"Moving Your Site to a New Server";s:7:"Author:";s:17:"Everett Griffiths";s:16:"Last Changed by:";s:12:"Mark Hamstra";s:12:"Wiki Markup:";s:47:"[revolution20:Moving Your Site to a New Server]";}s:6:"parent";s:8:"18678453";s:6:"source";s:11437:"MODX Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  In Revolution, it&#39;s more or less the same process, but there are couple extra tidbits to watch out for due to Revolution&#39;s thorough caching mechanisms and how certain server-specific data is stored in its database.

Following is the official documentation of how to move your site to a new location.  Normally, the move is to a new server, but the steps here also apply if you move your site to a new folder on your current web server.

{info:title=Tip}
It&#39;s not required, but it&#39;s a very good idea to turn off Friendly URLs (FURLS) in the Manager, if you have them on, and rename .htaccess to ht.access on your site before performing any of the steps below. Do the reverse as your last step after everything is working at the new location (rename ht.access to .htaccess and turn on FURLS). It takes a big potential source of confusion out of the picture during the transition.
{info}


h2. Log into the Manager: Clear your Cache and Sessions

Before doing anything else, it would be wise to empty all of the cached content.

* Log into the manager, then: Site \--&gt; Clear Cache
* Clear your sessions: Security \--&gt; Flush All Sessions

The first benefit of this is a smaller download / upload file.

If necessary, it is also possible to simply delete contents contained within the core/cache folder.


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because each file must often undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes, it&#39;s easier to clean up the mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.

h2. Change File Ownership

Sometimes the group and user ownership will change when moving from one host to another. Make sure that the files are owned and accessible to the web server. You will have to check the server configuration to ascertain the correct settings, or simply ask the host for the details.  A simpler method may be to simply look at the ownership placed on the tar.gz file when it was uploaded to the server. FTP software will almost always set the proper ownership on an uploaded file.

h2. Writable: 777 or 755?

Some of the folders need to be may writable. Depending on the security configuration of the service this may need to be 755 or 777. The tar.gz file should retain the old server permissions \-\- but those may not work on the new server.



h2. Dumping your Database

_Please note that MODX can run on multiple database drivers, currently MySQL and sqlsrv. The following section is MySQL specific, however you should be able to do the same with similar commands for sqlsrv._


You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.


{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODX Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config Files

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}

If you are also moving your site into or out of a subfolder, be sure to update the variables such as *$modx_connectors_url,* *$modx_manager_url,* and *$modx_base_url*. They should generally
end with a slash (e.g., *$modx_base_url=&#39;/&#39;* for a site not in a subfolder).

{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

There are also 3 additional configuration files that contain two PHP constants:

{code}
define(&#39;MODX_CORE_PATH&#39;, &#39;/path/to/modx_doc_root/core/&#39;);
define(&#39;MODX_CONFIG_KEY&#39;, &#39;config&#39;);
{code}

* /config.core.php
* /connectors/config.core.php
* /manager/config.core.php

Make sure you update the paths in these files as well.

h2. Update your Database

{note:title=Don&#39;t Forget the Database}MODX stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}
_Please note that MODX can run on multiple database drivers, currently  MySQL and sqlsrv. The following section is MySQL specific, however you  should be able to do the same with similar commands for sqlsrv._


Sometimes developers structure their development and production servers to use the _exact_ same path information, but often the file path information will change when we move our MODX web site to a new server.

To see the path information that is stored inside the MODX database, type the following query into phpMyAdmin, the MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary, e.g. `modx_workspaces`.

If the path on the new server is different than on the old server, you will need to update this record. You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the domain name in your .htaccess file(s).

h2. On the New Server

Log into the manager on the new server to verify that it works. Upon entry, you may experience:
{noformat}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{noformat}

That&#39;s because the old path is still cached; MODX Revolution caches a lot of information in the database and on the file system, so once you&#39;ve gotten the files and  database transferred over to the new server, make sure you clear your site&#39;s cache once again, and manually refresh the manager page.

If the cache and session information was not cleared before the move you will need to do so, if you encounter errors within the manager after moving the site.


h2. Re-run setup

Whenever changes are made to a MODX Revolution site in regards to installs, upgrades, or change of location it is important to re-run the domain.com/setup script. This should assist in solidifying the movement process due to the actions taken during its process.
* Make sure you are running the setup version from the same version of MODX Revolution you will be using.&amp;nbsp;
* Get the transferred site functional before attempting any version upgrades.

h2. Updating your Extras settings !modx-namespaces.png|align=right,thumbnail,border=1!

Some extras, such as Gallery, store information on where certain files can be found in their own settings. To take Gallery as the example, it stores the path to its assets, core, files and phpthumb folders on the filesystem. Depending on your setup these will change when moving and in order to keep using these addons you will need to update those paths. While every addon can decide for itself where to store paths, one of the popular locations is in the system settings.

Go to System \-&gt; System Settings in your manager, and find the namespaces dropdown, as seen on the image to the right (click to enlarge). Open it and look for the extra of your choice, for instance Gallery. Not all extras specify system settings but most of them will show up on the list anyway. Now that you have found where these paths are stored you can update them to reflect the new location.

*If you are using MODX Revolution 2.2*, you may also need to check the extension_packages system setting (found under the System &amp; Server area in the System Settings). This setting is used for custom resource classes (such as the *Articles*&amp;nbsp;addon) and defines the path to its model - this may need to be updated after moving your site.


h2. Final thoughts

It would be wise to keep backups from the old server until the new site has undergone a couple of backup generations and everything has been verified.

If you run into trouble after successfully running Setup, try manually deleting all files in the core/cache directory and clearing your browser cache and cookies.


Your site should now be up and running in its new location\!

{scrollbar}";s:8:"versions";a:31:{i:0;a:3:{s:2:"id";s:8:"22183945";s:3:"ver";s:1:"3";s:4:"code";s:11437:"MODX Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  In Revolution, it&#39;s more or less the same process, but there are couple extra tidbits to watch out for due to Revolution&#39;s thorough caching mechanisms and how certain server-specific data is stored in its database.

Following is the official documentation of how to move your site to a new location.  Normally, the move is to a new server, but the steps here also apply if you move your site to a new folder on your current web server.

{info:title=Tip}
It&#39;s not required, but it&#39;s a very good idea to turn off Friendly URLs (FURLS) in the Manager, if you have them on, and rename .htaccess to ht.access on your site before performing any of the steps below. Do the reverse as your last step after everything is working at the new location (rename ht.access to .htaccess and turn on FURLS). It takes a big potential source of confusion out of the picture during the transition.
{info}


h2. Log into the Manager: Clear your Cache and Sessions

Before doing anything else, it would be wise to empty all of the cached content.

* Log into the manager, then: Site \--&gt; Clear Cache
* Clear your sessions: Security \--&gt; Flush All Sessions

The first benefit of this is a smaller download / upload file.

If necessary, it is also possible to simply delete contents contained within the core/cache folder.


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because each file must often undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes, it&#39;s easier to clean up the mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.

h2. Change File Ownership

Sometimes the group and user ownership will change when moving from one host to another. Make sure that the files are owned and accessible to the web server. You will have to check the server configuration to ascertain the correct settings, or simply ask the host for the details.  A simpler method may be to simply look at the ownership placed on the tar.gz file when it was uploaded to the server. FTP software will almost always set the proper ownership on an uploaded file.

h2. Writable: 777 or 755?

Some of the folders need to be may writable. Depending on the security configuration of the service this may need to be 755 or 777. The tar.gz file should retain the old server permissions \-\- but those may not work on the new server.



h2. Dumping your Database

_Please note that MODX can run on multiple database drivers, currently MySQL and sqlsrv. The following section is MySQL specific, however you should be able to do the same with similar commands for sqlsrv._


You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.


{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODX Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config Files

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}

If you are also moving your site into or out of a subfolder, be sure to update the variables such as *$modx_connectors_url,* *$modx_manager_url,* and *$modx_base_url*. They should generally
end with a slash (e.g., *$modx_base_url=&#39;/&#39;* for a site not in a subfolder).

{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

There are also 3 additional configuration files that contain two PHP constants:

{code}
define(&#39;MODX_CORE_PATH&#39;, &#39;/path/to/modx_doc_root/core/&#39;);
define(&#39;MODX_CONFIG_KEY&#39;, &#39;config&#39;);
{code}

* /config.core.php
* /connectors/config.core.php
* /manager/config.core.php

Make sure you update the paths in these files as well.

h2. Update your Database

{note:title=Don&#39;t Forget the Database}MODX stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}
_Please note that MODX can run on multiple database drivers, currently  MySQL and sqlsrv. The following section is MySQL specific, however you  should be able to do the same with similar commands for sqlsrv._


Sometimes developers structure their development and production servers to use the _exact_ same path information, but often the file path information will change when we move our MODX web site to a new server.

To see the path information that is stored inside the MODX database, type the following query into phpMyAdmin, the MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary, e.g. `modx_workspaces`.

If the path on the new server is different than on the old server, you will need to update this record. You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the domain name in your .htaccess file(s).

h2. On the New Server

Log into the manager on the new server to verify that it works. Upon entry, you may experience:
{noformat}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{noformat}

That&#39;s because the old path is still cached; MODX Revolution caches a lot of information in the database and on the file system, so once you&#39;ve gotten the files and  database transferred over to the new server, make sure you clear your site&#39;s cache once again, and manually refresh the manager page.

If the cache and session information was not cleared before the move you will need to do so, if you encounter errors within the manager after moving the site.


h2. Re-run setup

Whenever changes are made to a MODX Revolution site in regards to installs, upgrades, or change of location it is important to re-run the domain.com/setup script. This should assist in solidifying the movement process due to the actions taken during its process.
* Make sure you are running the setup version from the same version of MODX Revolution you will be using.&amp;nbsp;
* Get the transferred site functional before attempting any version upgrades.

h2. Updating your Extras settings !modx-namespaces.png|align=right,thumbnail,border=1!

Some extras, such as Gallery, store information on where certain files can be found in their own settings. To take Gallery as the example, it stores the path to its assets, core, files and phpthumb folders on the filesystem. Depending on your setup these will change when moving and in order to keep using these addons you will need to update those paths. While every addon can decide for itself where to store paths, one of the popular locations is in the system settings.

Go to System \-&gt; System Settings in your manager, and find the namespaces dropdown, as seen on the image to the right (click to enlarge). Open it and look for the extra of your choice, for instance Gallery. Not all extras specify system settings but most of them will show up on the list anyway. Now that you have found where these paths are stored you can update them to reflect the new location.

*If you are using MODX Revolution 2.2*, you may also need to check the extension_packages system setting (found under the System &amp; Server area in the System Settings). This setting is used for custom resource classes (such as the *Articles*&amp;nbsp;addon) and defines the path to its model - this may need to be updated after moving your site.


h2. Final thoughts

It would be wise to keep backups from the old server until the new site has undergone a couple of backup generations and everything has been verified.

If you run into trouble after successfully running Setup, try manually deleting all files in the core/cache directory and clearing your browser cache and cookies.


Your site should now be up and running in its new location\!

{scrollbar}";}i:1;a:3:{s:2:"id";s:8:"37683239";s:3:"ver";s:1:"2";s:4:"code";s:11087:"MODX Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  In Revolution, it&#39;s more or less the same process, but there are couple extra tidbits to watch out for due to Revolution&#39;s thorough caching mechanisms and how certain server-specific data is stored in its database.

Following is the official documentation of how to move your site to a new location.  Normally, the move is to a new server, but the steps here also apply if you move your site to a new folder on your current web server.

{info:title=Tip}
It&#39;s not required, but it&#39;s a very good idea to turn off Friendly URLs (FURLS) in the Manager, if you have them on, and rename .htaccess to ht.access on your site before performing any of the steps below. Do the reverse as your last step after everything is working at the new location (rename ht.access to .htaccess and turn on FURLS). It takes a big potential source of confusion out of the picture during the transition.
{info}


h2. Log into the Manager: Clear your Cache and Sessions

Before doing anything else, it would be wise to empty all of the cached content.

* Log into the manager, then: Site \--&gt; Clear Cache
* Clear your sessions: Security \--&gt; Flush All Sessions

The first benefit of this is a smaller download / upload file.

If necessary, it is also possible to simply delete contents contained within the core/cache folder.


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because each file must often undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes, it&#39;s easier to clean up the mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.

h2. Change File Ownership

Sometimes the group and user ownership will change when moving from one host to another. Make sure that the files are owned and accessible to the web server. You will have to check the server configuration to ascertain the correct settings, or simply ask the host for the details.  A simpler method may be to simply look at the ownership placed on the tar.gz file when it was uploaded to the server. FTP software will almost always set the proper ownership on an uploaded file.

h2. Writable: 777 or 755?

Some of the folders need to be may writable. Depending on the security configuration of the service this may need to be 755 or 777. The tar.gz file should retain the old server permissions \-\- but those may not work on the new server.



h2. Dumping your Database

_Please note that MODX can run on multiple database drivers, currently MySQL and sqlsrv. The following section is MySQL specific, however you should be able to do the same with similar commands for sqlsrv._


You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.


{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODX Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config Files

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}

If you are also moving your site into or out of a subfolder, be sure to update the variables such as *$modx_connectors_url,* *$modx_manager_url,* and *$modx_base_url*. They should generally
end with a slash (e.g., *$modx_base_url=&#39;/&#39;* for a site not in a subfolder).

{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

There are also 3 additional configuration files that contain two PHP constants:

{code}
define(&#39;MODX_CORE_PATH&#39;, &#39;/path/to/modx_doc_root/core/&#39;);
define(&#39;MODX_CONFIG_KEY&#39;, &#39;config&#39;);
{code}

* /config.core.php
* /connectors/config.core.php
* /manager/config.core.php

Make sure you update the paths in these files as well.

h2. Update your Database

{note:title=Don&#39;t Forget the Database}MODX stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}
_Please note that MODX can run on multiple database drivers, currently  MySQL and sqlsrv. The following section is MySQL specific, however you  should be able to do the same with similar commands for sqlsrv._


Sometimes developers structure their development and production servers to use the _exact_ same path information, but often the file path information will change when we move our MODX web site to a new server.

To see the path information that is stored inside the MODX database, type the following query into phpMyAdmin, the MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary, e.g. `modx_workspaces`.

If the path on the new server is different than on the old server, you will need to update this record. You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the domain name in your .htaccess file(s).

h2. On the New Server

Log into the manager on the new server to verify that it works. Upon entry, you may experience:
{noformat}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{noformat}

That&#39;s because the old path is still cached; MODX Revolution caches a lot of information in the database and on the file system, so once you&#39;ve gotten the files and  database transferred over to the new server, make sure you clear your site&#39;s cache once again, and manually refresh the manager page.

If the cache and session information was not cleared before the move you will need to do so, if you encounter errors within the manager after moving the site.


h2. Re-run setup

Whenever changes are made to a MODX Revolution site in regards to installs, upgrades, or change of location it is important to re-run the domain.com/setup script. This should assist in solidifying the movement process due to the actions taken during its process.
* Make sure you are running the setup version from the same version of MODX Revolution you will be using.&amp;nbsp;
* Get the transferred site functional before attempting any version upgrades.

h2. Updating your Extras settings !modx-namespaces.png|align=right,thumbnail,border=1!

Some extras, such as Gallery, store information on where certain files can be found in their own settings. To take Gallery as the example, it stores the path to its assets, core, files and phpthumb folders on the filesystem. Depending on your setup these will change when moving and in order to keep using these addons you will need to update those paths. While every addon can decide for itself where to store paths, one of the popular locations is in the system settings.

Go to System \-&gt; System Settings in your manager, and find the namespaces dropdown, as seen on the image to the right (click to enlarge). Open it and look for the extra of your choice, for instance Gallery. Not all extras specify system settings but most of them will show up on the list anyway. Now that you have found where these paths are stored you can update them to reflect the new location.


h2. Final thoughts

It would be wise to keep backups from the old server until the new site has undergone a couple of backup generations and everything has been verified.

If you run into trouble after successfully running Setup, try manually deleting all files in the core/cache directory and clearing your browser cache and cookies.


Your site should now be up and running in its new location\!

{scrollbar}";}i:2;a:3:{s:2:"id";s:8:"36634738";s:3:"ver";s:1:"2";s:4:"code";s:10936:"MODX Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  In Revolution, it&#39;s more or less the same process, but there are couple extra tidbits to watch out for due to Revolution&#39;s thorough caching mechanisms and how certain server-specific data is stored in its database.

Following is the official documentation of how to move your site to a new location.  Normally, the move is to a new server, but the steps here also apply if you move your site to a new folder on your current web server.

{info:title=Tip}
It&#39;s not required, but it&#39;s a very good idea to turn off Friendly URLs (FURLS) in the Manager, if you have them on, and rename .htaccess to ht.access on your site before performing any of the steps below. Do the reverse as your last step after everything is working at the new location (rename ht.access to .htaccess and turn on FURLS). It takes a big potential source of confusion out of the picture during the transition.
{info}


h2. Log into the Manager: Clear your Cache and Sessions

Before doing anything else, it would be wise to empty all of the cached content.

* Log into the manager, then: Site \--&gt; Clear Cache
* Clear your sessions: Security \--&gt; Flush All Sessions

The first benefit of this is a smaller download / upload file.

If necessary, it is also possible to simply delete contents contained within the core/cache folder.


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because each file must often undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes, it&#39;s easier to clean up the mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.

h2. Change File Ownership

Sometimes the group and user ownership will change when moving from one host to another. Make sure that the files are owned and accessible to the web server. You will have to check the server configuration to ascertain the correct settings, or simply ask the host for the details.  A simpler method may be to simply look at the ownership placed on the tar.gz file when it was uploaded to the server. FTP software will almost always set the proper ownership on an uploaded file.

h2. Writable: 777 or 755?

Some of the folders need to be may writable. Depending on the security configuration of the service this may need to be 755 or 777. The tar.gz file should retain the old server permissions \-\- but those may not work on the new server.



h2. Dumping your Database

_Please note that MODX can run on multiple database drivers, currently MySQL and sqlsrv. The following section is MySQL specific, however you should be able to do the same with similar commands for sqlsrv._


You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.


{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODX Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config Files

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}

If you are also moving your site into or out of a subfolder, be sure to update the variables such as *$modx_connectors_url,* *$modx_manager_url,* and *$modx_base_url*. They should generally
end with a slash (e.g., *$modx_base_url=&#39;/&#39;* for a site not in a subfolder).

{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

There are also 3 additional configuration files that contain two PHP constants:

{code}
define(&#39;MODX_CORE_PATH&#39;, &#39;/path/to/modx_doc_root/core/&#39;);
define(&#39;MODX_CONFIG_KEY&#39;, &#39;config&#39;);
{code}

* /config.core.php
* /connectors/config.core.php
* /manager/config.core.php

Make sure you update the paths in these files as well.

h2. Update your Database

{note:title=Don&#39;t Forget the Database}MODX stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}
_Please note that MODX can run on multiple database drivers, currently  MySQL and sqlsrv. The following section is MySQL specific, however you  should be able to do the same with similar commands for sqlsrv._


Sometimes developers structure their development and production servers to use the _exact_ same path information, but often the file path information will change when we move our MODX web site to a new server.

To see the path information that is stored inside the MODX database, type the following query into phpMyAdmin, the MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary, e.g. `modx_workspaces`.

If the path on the new server is different than on the old server, you will need to update this record. You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the domain name in your .htaccess file(s).

h2. On the New Server

Log into the manager on the new server to verify that it works. Upon entry, you may experience:
{noformat}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{noformat}

That&#39;s because the old path is still cached; MODX Revolution caches a lot of information in the database and on the file system, so once you&#39;ve gotten the files and  database transferred over to the new server, make sure you clear your site&#39;s cache once again, and manually refresh the manager page.

If the cache and session information was not cleared before the move you will need to do so, if you encounter errors within the manager after moving the site.


h2. Re-run setup (optional)

Whenever changes are made to a MODX Revolution site in regards to installs, upgrades, or change of location it can be helpful to re-run the domain.com/setup script. This should assist in solidifying the movement process due to the actions taken during its process.
* Make sure you are running the setup version from the same version of MODX Revolution you will be using.&amp;nbsp;
* Get the transferred site functional before attempting any version upgrades.

h2. Updating your Extras settings !modx-namespaces.png|align=right,thumbnail,border=1!

Some extras, such as Gallery, store information on where certain files can be found in their own settings. To take Gallery as the example, it stores the path to its assets, core, files and phpthumb folders on the filesystem. Depending on your setup these will change when moving and in order to keep using these addons you will need to update those paths. While every addon can decide for itself where to store paths, one of the popular locations is in the system settings.

Go to System \-&gt; System Settings in your manager, and find the namespaces dropdown, as seen on the image to the right (click to enlarge). Open it and look for the extra of your choice, for instance Gallery. Not all extras specify system settings but most of them will show up on the list anyway. Now that you have found where these paths are stored you can update them to reflect the new location.


h2. Final thoughts

It would be wise to keep backups from the old server until the new site has undergone a couple of backup generations and everything has been verified.


Your site should now be up and running in its new location\!

{scrollbar}";}i:3;a:3:{s:2:"id";s:8:"35586500";s:3:"ver";s:1:"2";s:4:"code";s:10607:"MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  In Revolution, it&#39;s more or less the same process, but there are couple extra tidbits to watch out for due to Revolution&#39;s thorough caching mechanisms and how certain server-specific data is stored in its database.

Following is the official documentation of how to move your site to a new location.  Normally, the move is to a new server, but the steps here also apply if you move your site to a new folder on your current web server.

{info:title=Tip}
It&#39;s not required, but it&#39;s a very good idea to turn off Friendly URLs (FURLS) in the Manager, if you have them on, and rename .htaccess to ht.access on your site before performing any of the steps below. Do the reverse as your last step after everything is working at the new location (rename ht.access to .htaccess and turn on FURLS). It takes a big potential source of confusion out of the picture during the transition.
{info}


h2. Log into the Manager: Clear your Cache and Sessions

Before doing anything else, it would be wise to empty all of the cached content.

* Log into the manager, then: Site \--&gt; Clear Cache
* Clear your sessions: Security \--&gt; Flush All Sessions

The first benefit of this is a smaller download / upload file.

If necessary, it is also possible to simply delete contents contained within the core/cache folder.


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because each file must often undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes, it&#39;s easier to clean up the mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.

h2. Change File Ownership

Sometimes the group and user ownership will change when moving from one host to another. Make sure that the files are owned and accessible to the web server. You will have to check the server configuration to ascertain the correct settings, or simply ask the host for the details.  A simpler method may be to simply look at the ownership placed on the tar.gz file when it was uploaded to the server. FTP software will almost always set the proper ownership on an uploaded file.

h2. Writable: 777 or 755?

Some of the folders need to be may writable. Depending on the security configuration of the service this may need to be 755 or 777. The tar.gz file should retain the old server permissions \-\- but those may not work on the new server.



h2. Dumping your Database

You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility. (In the future, MODx will be able to run on other databases, but for now it runs on MySQL).

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config Files

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}

If you are also moving your site into or out of a subfolder, be sure to update the variables such as *$modx_connectors_url,* *$modx_manager_url,* and *$modx_base_url*. They should generally
end with a slash (e.g., *$modx_base_url=&#39;/&#39;* for a site not in a subfolder).

{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

There are also 3 additional configuration files that contain two PHP constants:

{code}
define(&#39;MODX_CORE_PATH&#39;, &#39;/path/to/modx_doc_root/core/&#39;);
define(&#39;MODX_CONFIG_KEY&#39;, &#39;config&#39;);
{code}

* /config.core.php
* /connectors/config.core.php
* /manager/config.core.php

Make sure you update the paths in these files as well.

h2. Update your Database

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}

Sometimes developers structure their development and production servers to use the _exact_ same path information, but often the file path information will change when we move our MODx web site to a new server.

To see the path information that is stored inside the MODx database, type the following query into phpMyAdmin, the MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary, e.g. `modx_workspaces`.

If the path on the new server is different than on the old server, you will need to update this record. You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the domain name in your .htaccess file(s).

h2. On the New Server

Log into the manager on the new server to verify that it works. Upon entry, you may experience:
{noformat}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{noformat}

That&#39;s because the old path is still cached; MODx Revolution caches a lot of information in the database and on the file system, so once you&#39;ve gotten the files and  database transferred over to the new server, make sure you clear your site&#39;s cache once again, and manually refresh the manager page.

If the cache and session information was not cleared before the move you will need to do so, if you encounter errors within the manager after moving the site.


h2. Re-run setup (optional)

Whenever changes are made to a MODx Revolution site in regards to installs, upgrades, or change of location it can be helpful to re-run the domain.com/setup script. This should assist in solidifying the movement process due to the actions taken during its process.
* Make sure you are running the setup version from the same version of MODx Revolution you will be using.&amp;nbsp;
* Get the transferred site functional before attempting any version upgrades.

h2. Updating your Extras settings !modx-namespaces.png|align=right,thumbnail,border=1!
Some extras, such as Gallery, store information on where certain files can be found in their own settings. To take Gallery as the example, it stores the path to its assets, core, files and phpthumb folders on the filesystem. Depending on your setup these will change when moving and in order to keep using these addons you will need to update those paths. While every addon can decide for itself where to store paths, one of the popular locations is in the system settings.

Go to System \-&gt; System Settings in your manager, and find the namespaces dropdown, as seen on the image to the right (click to enlarge). Open it and look for the extra of your choice, for instance Gallery. Not all extras specify system settings but most of them will show up on the list anyway. Now that you have found where these paths are stored you can update them to reflect the new location.


h2. Final thoughts

It would be wise to keep backups from the old server until the new site has undergone a couple of backup generations and everything has been verified.


Your site should now be up and running in its new location\!

{scrollbar}";}i:4;a:3:{s:2:"id";s:8:"35094747";s:3:"ver";s:1:"2";s:4:"code";s:9642:"MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  In Revolution, it&#39;s more or less the same process, but there are couple extra tidbits to watch out for due to Revolution&#39;s thorough caching mechanisms and how certain server-specific data is stored in its database.

Following is the official documentation of how to move your site to a new location.  Normally, the move is to a new server, but the steps here also apply if you move your site to a new folder on your current web server.

{info:title=Tip}
It&#39;s not required, but it&#39;s a very good idea to turn off Friendly URLs (FURLS) in the Manager, if you have them on, and rename .htaccess to ht.access on your site before performing any of the steps below. Do the reverse as your last step after everything is working at the new location (rename ht.access to .htaccess and turn on FURLS). It takes a big potential source of confusion out of the picture during the transition.
{info}


h2. Log into the Manager: Clear your Cache and Sessions

Before doing anything else, it would be wise to empty all of the cached content.

* Log into the manager, then: Site \--&gt; Clear Cache
* Clear your sessions: Security \--&gt; Flush All Sessions

The first benefit of this is a smaller download / upload file.

If necessary, it is also possible to simply delete contents contained within the core/cache folder.


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because each file must often undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes, it&#39;s easier to clean up the mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.

h2. Change File Ownership

Sometimes the group and user ownership will change when moving from one host to another. Make sure that the files are owned and accessible to the web server. You will have to check the server configuration to ascertain the correct settings, or simply ask the host for the details.  A simpler method may be to simply look at the ownership placed on the tar.gz file when it was uploaded to the server. FTP software will almost always set the proper ownership on an uploaded file.

h2. Writable: 777 or 755?

Some of the folders need to be may writable. Depending on the security configuration of the service this may need to be 755 or 777. The tar.gz file should retain the old server permissions \-\- but those may not work on the new server.



h2. Dumping your Database

You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility. (In the future, MODx will be able to run on other databases, but for now it runs on MySQL).

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config Files

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}

If you are also moving your site into or out of a subfolder, be sure to update the variables such as *$modx_connectors_url,* *$modx_manager_url,* and *$modx_base_url*. They should generally
end with a slash (e.g., *$modx_base_url=&#39;/&#39;* for a site not in a subfolder).

{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

There are also 3 additional configuration files that contain two PHP constants:

{code}
define(&#39;MODX_CORE_PATH&#39;, &#39;/path/to/modx_doc_root/core/&#39;);
define(&#39;MODX_CONFIG_KEY&#39;, &#39;config&#39;);
{code}

* /config.core.php
* /connectors/config.core.php
* /manager/config.core.php

Make sure you update the paths in these files as well.

h2. Update your Database

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}

Sometimes developers structure their development and production servers to use the _exact_ same path information, but often the file path information will change when we move our MODx web site to a new server.

To see the path information that is stored inside the MODx database, type the following query into phpMyAdmin, the MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary, e.g. `modx_workspaces`.

If the path on the new server is different than on the old server, you will need to update this record. You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the domain name in your .htaccess file(s).

h2. On the New Server

Log into the manager on the new server to verify that it works. Upon entry, you may experience:
{noformat}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{noformat}

That&#39;s because the old path is still cached; MODx Revolution caches a lot of information in the database and on the file system, so once you&#39;ve gotten the files and  database transferred over to the new server, make sure you clear your site&#39;s cache once again, and manually refresh the manager page.

If the cache and session information was not cleared before the move you will need to do so, if you encounter errors within the manager after moving the site.


h2. Re-run setup (optional)

Whenever changes are made to a MODx Revolution site in regards to installs, upgrades, or change of location it can be helpful to re-run the domain.com/setup script. This should assist in solidifying the movement process due to the actions taken during its process.
* Make sure you are running the setup version from the same version of MODx Revolution you will be using.&amp;nbsp;
* Get the transferred site functional before attempting any version upgrades.

h2. Final thoughts

It would be wise to keep backups from the old server until the new site has undergone a couple of backup generations and everything has been verified.


Your site should now be up and running in its new location\!

{scrollbar}";}i:5;a:3:{s:2:"id";s:8:"33947821";s:3:"ver";s:1:"2";s:4:"code";s:9535:"MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  In Revolution, it&#39;s more or less the same process, but there are couple extra tidbits to watch out for due to Revolution&#39;s thorough caching mechanisms and how certain server-specific data is stored in its database.

Following is the official documentation of how to move your site to a new location.  Normally, the move is to a new server, but the steps here also apply if you move your site to a new folder on your current web server.

{info:title=Tip}
It&#39;s not required, but it&#39;s a very good idea to turn off Friendly URLs (FURLS) in the Manager, if you have them on, and rename .htaccess to ht.access on your site before performing any of the steps below. Do the reverse as your last step after everything is working at the new location (rename ht.access to .htaccess and turn on FURLS). It takes a big potential source of confusion out of the picture during the transition.
{info}


h2. Log into the Manager: Clear your Cache and Sessions

Before doing anything else, it would be wise to empty all of the cached content.

* Log into the manager, then: Site \--&gt; Clear Cache
* Clear your sessions: Security \--&gt; Flush All Sessions

The first benefit of this is a smaller download / upload file.

If necessary, it is also possible to simply delete contents contained within the core/cache folder.


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because each file must often undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes, it&#39;s easier to clean up the mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.

h2. Change File Ownership

Sometimes the group and user ownership will change when moving from one host to another. Make sure that the files are owned and accessible to the web server. You will have to check the server configuration to ascertain the correct settings, or simply ask the host for the details.  A simpler method may be to simply look at the ownership placed on the tar.gz file when it was uploaded to the server. FTP software will almost always set the proper ownership on an uploaded file.

h2. Writable: 777 or 755?

Some of the folders need to be may writable. Depending on the security configuration of the service this may need to be 755 or 777. The tar.gz file should retain the old server permissions \-\- but those may not work on the new server.



h2. Dumping your Database

You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility. (In the future, MODx will be able to run on other databases, but for now it runs on MySQL).

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config Files

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}

If you are also moving your site into or out of a subfolder, be sure to update the variables such as *$modx_connectors_url,* *$modx_manager_url,* and *$modx_base_url*.

{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

There are also 3 additional configuration files that contain two PHP constants:

{code}
define(&#39;MODX_CORE_PATH&#39;, &#39;/path/to/modx_doc_root/core/&#39;);
define(&#39;MODX_CONFIG_KEY&#39;, &#39;config&#39;);
{code}

* /config.core.php
* /connectors/config.core.php
* /manager/config.core.php

Make sure you update the paths in these files as well.

h2. Update your Database

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}

Sometimes developers structure their development and production servers to use the _exact_ same path information, but often the file path information will change when we move our MODx web site to a new server.

To see the path information that is stored inside the MODx database, type the following query into phpMyAdmin, the MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary, e.g. `modx_workspaces`.

If the path on the new server is different than on the old server, you will need to update this record. You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the domain name in your .htaccess file(s).

h2. On the New Server

Log into the manager on the new server to verify that it works. Upon entry, you may experience:
{noformat}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{noformat}

That&#39;s because the old path is still cached; MODx Revolution caches a lot of information in the database and on the file system, so once you&#39;ve gotten the files and  database transferred over to the new server, make sure you clear your site&#39;s cache once again, and manually refresh the manager page.

If the cache and session information was not cleared before the move you will need to do so, if you encounter errors within the manager after moving the site.


h2. Re-run setup (optional)

Whenever changes are made to a MODx Revolution site in regards to installs, upgrades, or change of location it can be helpful to re-run the domain.com/setup script. This should assist in solidifying the movement process due to the actions taken during its process.
* Make sure you are running the setup version from the same version of MODx Revolution you will be using.&amp;nbsp;
* Get the transferred site functional before attempting any version upgrades.

h2. Final thoughts

It would be wise to keep backups from the old server until the new site has undergone a couple of backup generations and everything has been verified.


Your site should now be up and running in its new location\!

{scrollbar}";}i:6;a:3:{s:2:"id";s:8:"33947819";s:3:"ver";s:1:"2";s:4:"code";s:9513:"MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  In Revolution, it&#39;s more or less the same process, but there are couple extra tidbits to watch out for due to Revolution&#39;s thorough caching mechanisms and how certain server-specific data is stored in its database.

Following is the official documentation of how to move your site to a new location.  Normally, the move is to a new server, but the steps here also apply if you move your site to a new folder on your current web server.

{info:title=Tip}
It&#39;s not required, but it&#39;s a very good idea to turn off Friendly URLs (FURLS) in the Manager, if you have them on, and rename .htaccess to ht.access on your site before performing any of the steps below. Do the reverse as your last step after everything is working at the new location (rename ht.access to .htaccess and turn on FURLS). It takes a big potential source of confusion out of the picture during the transition.
{info}


h2. Log into the Manager: Clear your Cache and Sessions

Before doing anything else, it would be wise to empty all of the cached content.

* Log into the manager, then: Site \--&gt; Clear Cache
* Clear your sessions: Security \--&gt; Flush All Sessions

The first benefit of this is a smaller download / upload file.

If necessary, it is also possible to simply delete contents contained within the core/cache folder.


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because each file must often undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes, it&#39;s easier to clean up the mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.

h2. Change File Ownership

Sometimes the group and user ownership will change when moving from one host to another. Make sure that the files are owned and accessible to the web server. You will have to check the server configuration to ascertain the correct settings, or simply ask the host for the details.  A simpler method may be to simply look at the ownership placed on the tar.gz file when it was uploaded to the server. FTP software will almost always set the proper ownership on an uploaded file.

h2. Writable: 777 or 755?

Some of the folders need to be may writable. Depending on the security configuration of the service this may need to be 755 or 777. The tar.gz file should retain the old server permissions \-\- but those may not work on the new server.



h2. Dumping your Database

You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility. (In the future, MODx will be able to run on other databases, but for now it runs on MySQL).

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config Files

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}

If you are also moving your site into or out of a subfolder, be sure to update the variables such as *$modx_connectors_url* and *$modx_base_url*.

{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

There are also 3 additional configuration files that contain two PHP constants:

{code}
define(&#39;MODX_CORE_PATH&#39;, &#39;/path/to/modx_doc_root/core/&#39;);
define(&#39;MODX_CONFIG_KEY&#39;, &#39;config&#39;);
{code}

* /config.core.php
* /connectors/config.core.php
* /manager/config.core.php

Make sure you update the paths in these files as well.

h2. Update your Database

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}

Sometimes developers structure their development and production servers to use the _exact_ same path information, but often the file path information will change when we move our MODx web site to a new server.

To see the path information that is stored inside the MODx database, type the following query into phpMyAdmin, the MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary, e.g. `modx_workspaces`.

If the path on the new server is different than on the old server, you will need to update this record. You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the domain name in your .htaccess file(s).

h2. On the New Server

Log into the manager on the new server to verify that it works. Upon entry, you may experience:
{noformat}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{noformat}

That&#39;s because the old path is still cached; MODx Revolution caches a lot of information in the database and on the file system, so once you&#39;ve gotten the files and  database transferred over to the new server, make sure you clear your site&#39;s cache once again, and manually refresh the manager page.

If the cache and session information was not cleared before the move you will need to do so, if you encounter errors within the manager after moving the site.


h2. Re-run setup (optional)

Whenever changes are made to a MODx Revolution site in regards to installs, upgrades, or change of location it can be helpful to re-run the domain.com/setup script. This should assist in solidifying the movement process due to the actions taken during its process.
* Make sure you are running the setup version from the same version of MODx Revolution you will be using.&amp;nbsp;
* Get the transferred site functional before attempting any version upgrades.

h2. Final thoughts

It would be wise to keep backups from the old server until the new site has undergone a couple of backup generations and everything has been verified.


Your site should now be up and running in its new location\!

{scrollbar}";}i:7;a:3:{s:2:"id";s:8:"33587441";s:3:"ver";s:1:"2";s:4:"code";s:9157:"MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  In Revolution, it&#39;s more or less the same process, but there are couple extra tidbits to watch out for due to Revolution&#39;s thorough caching mechanisms and how certain server-specific data is stored in its database.

Following is the official documentation of how to move your site to a new location.  Normally, the move is to a new server, but the steps here also apply if you move your site to a new folder on your current web server.

{info:title=Tip}
It&#39;s not required, but it&#39;s a very good idea to turn off Friendly URLs (FURLS) in the Manager, if you have them on, and rename .htaccess to ht.access on your site before performing any of the steps below. Do the reverse as your last step after everything is working at the new location (rename ht.access to .htaccess and turn on FURLS). It takes a big potential source of confusion out of the picture during the transition.
{info}


h2. Log into the Manager: Clear your Cache and Sessions

Before doing anything else, it would be wise to empty all of the cached content.

* Log into the manager, then: Site \--&gt; Clear Cache
* Clear your sessions: Security \--&gt; Flush All Sessions

The first benefit of this is a smaller download / upload file.

If necessary, it is also possible to simply delete contents contained within the core/cache folder.


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because each file must often undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes, it&#39;s easier to clean up the mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.

h2. Change File Ownership

Sometimes the group and user ownership will change when moving from one host to another. Make sure that the files are owned and accessible to the web server. You will have to check the server configuration to ascertain the correct settings, or simply ask the host for the details.  A simpler method may be to simply look at the ownership placed on the tar.gz file when it was uploaded to the server. FTP software will almost always set the proper ownership on an uploaded file.

h2. Writable: 777 or 755?

Some of the folders need to be may writable. Depending on the security configuration of the service this may need to be 755 or 777. The tar.gz file should retain the old server permissions \-\- but those may not work on the new server.



h2. Dumping your Database

You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility. (In the future, MODx will be able to run on other databases, but for now it runs on MySQL).

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}

If you are also moving your site into or out of a subfolder, be sure to update the variables such as *$modx_connectors_url* and *$modx_base_url*.

{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}

Sometimes developers structure their development and production servers to use the _exact_ same path information, but often the file path information will change when we move our MODx web site to a new server. 

To see the path information that is stored inside the MODx database, type the following query into phpMyAdmin, the MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary, e.g. `modx_workspaces`.

If the path on the new server is different than on the old server, you will need to update this record. You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the domain name in your .htaccess file(s).

h2. On the New Server

Log into the manager on the new server to verify that it works. Upon entry, you may experience:
{noformat}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{noformat}

That&#39;s because the old path is still cached; MODx Revolution caches a lot of information in the database and on the file system, so once you&#39;ve gotten the files and  database transferred over to the new server, make sure you clear your site&#39;s cache once again, and manually refresh the manager page.

If the cache and session information was not cleared before the move you will need to do so, if you encounter errors within the manager after moving the site.


h2. Re-run setup (optional)

Whenever changes are made to a MODx Revolution site in regards to installs, upgrades, or change of location it can be helpful to re-run the domain.com/setup script. This should assist in solidifying the movement process due to the actions taken during its process.
* Make sure you are running the setup version from the same version of MODx Revolution you will be using.&amp;nbsp;
* Get the transferred site functional before attempting any version upgrades.

h2. Final thoughts

It would be wise to keep backups from the old server until the new site has undergone a couple of backup generations and everything has been verified.


Your site should now be up and running in its new location\!

{scrollbar}";}i:8;a:3:{s:2:"id";s:8:"33587236";s:3:"ver";s:1:"2";s:4:"code";s:9137:"MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  In Revolution, it&#39;s more or less the same process, but there are couple extra tidbits to watch out for due to Revolution&#39;s thorough caching mechanisms and how certain server-specific data is stored in its database.

Following is the official documentation of how to move your site to a new location.  Normally, the move is to a new server, but the steps here also apply if you move your site to a new folder on your current web server.

{info:title=Tip}
It&#39;s not required, but it&#39;s a very good idea to turn off Friendly URLs (FURLS) in the Manager, if you have them on, and rename .htaccess to ht.access on your site before performing any of the steps below. Do the reverse as your last step after everything is working (rename ht.access to .htaccess and turn on FURLS). It takes a big potential source of confusion out of the picture during the transition.
{info}


h2. Log into the Manager: Clear your Cache and Sessions

Before doing anything else, it would be wise to empty all of the cached content.

* Log into the manager, then: Site \--&gt; Clear Cache
* Clear your sessions: Security \--&gt; Flush All Sessions

The first benefit of this is a smaller download / upload file.

If necessary, it is also possible to simply delete contents contained within the core/cache folder.


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because each file must often undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes, it&#39;s easier to clean up the mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.

h2. Change File Ownership

Sometimes the group and user ownership will change when moving from one host to another. Make sure that the files are owned and accessible to the web server. You will have to check the server configuration to ascertain the correct settings, or simply ask the host for the details.  A simpler method may be to simply look at the ownership placed on the tar.gz file when it was uploaded to the server. FTP software will almost always set the proper ownership on an uploaded file.

h2. Writable: 777 or 755?

Some of the folders need to be may writable. Depending on the security configuration of the service this may need to be 755 or 777. The tar.gz file should retain the old server permissions \-\- but those may not work on the new server.



h2. Dumping your Database

You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility. (In the future, MODx will be able to run on other databases, but for now it runs on MySQL).

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}

If you are also moving your site into or out of a subfolder, be sure to update the variables such as *$modx_connectors_url* and *$modx_base_url*.

{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}

Sometimes developers structure their development and production servers to use the _exact_ same path information, but often the file path information will change when we move our MODx web site to a new server. 

To see the path information that is stored inside the MODx database, type the following query into phpMyAdmin, the MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary, e.g. `modx_workspaces`.

If the path on the new server is different than on the old server, you will need to update this record. You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the domain name in your .htaccess file(s).

h2. On the New Server

Log into the manager on the new server to verify that it works. Upon entry, you may experience:
{noformat}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{noformat}

That&#39;s because the old path is still cached; MODx Revolution caches a lot of information in the database and on the file system, so once you&#39;ve gotten the files and  database transferred over to the new server, make sure you clear your site&#39;s cache once again, and manually refresh the manager page.

If the cache and session information was not cleared before the move you will need to do so, if you encounter errors within the manager after moving the site.


h2. Re-run setup (optional)

Whenever changes are made to a MODx Revolution site in regards to installs, upgrades, or change of location it can be helpful to re-run the domain.com/setup script. This should assist in solidifying the movement process due to the actions taken during its process.
* Make sure you are running the setup version from the same version of MODx Revolution you will be using.&amp;nbsp;
* Get the transferred site functional before attempting any version upgrades.

h2. Final thoughts

It would be wise to keep backups from the old server until the new site has undergone a couple of backup generations and everything has been verified.


Your site should now be up and running in its new location\!

{scrollbar}";}i:9;a:3:{s:2:"id";s:8:"33587235";s:3:"ver";s:1:"2";s:4:"code";s:9110:"MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  In Revolution, it&#39;s more or less the same process, but there are couple extra tidbits to watch out for due to Revolution&#39;s thorough caching mechanisms and how certain server-specific data is stored in its database.

Following is the official documentation of how to move your site to a new location.  Normally, the move is to a new server, but the steps here also apply if you move your site to a new folder on your current web server.

{info:title=Tip}
It&#39;s a very good idea to turn off Friendly URLs (FURLS) in the Manager, if you have them on, and rename .htaccess to ht.access on your site before performing any of the steps below. Do the reverse as your last step after everything is working (rename ht.access to .htaccess and turn on FURLS). It takes a big potential source of confusion out of the picture during the transition.
{info}


h2. Log into the Manager: Clear your Cache and Sessions

Before doing anything else, it would be wise to empty all of the cached content.

* Log into the manager, then: Site \--&gt; Clear Cache
* Clear your sessions: Security \--&gt; Flush All Sessions

The first benefit of this is a smaller download / upload file.

If necessary, it is also possible to simply delete contents contained within the core/cache folder.


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because each file must often undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes, it&#39;s easier to clean up the mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.

h2. Change File Ownership

Sometimes the group and user ownership will change when moving from one host to another. Make sure that the files are owned and accessible to the web server. You will have to check the server configuration to ascertain the correct settings, or simply ask the host for the details.  A simpler method may be to simply look at the ownership placed on the tar.gz file when it was uploaded to the server. FTP software will almost always set the proper ownership on an uploaded file.

h2. Writable: 777 or 755?

Some of the folders need to be may writable. Depending on the security configuration of the service this may need to be 755 or 777. The tar.gz file should retain the old server permissions \-\- but those may not work on the new server.



h2. Dumping your Database

You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility. (In the future, MODx will be able to run on other databases, but for now it runs on MySQL).

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}

If you are also moving your site into or out of a subfolder, be sure to update the variables such as *$modx_connectors_url* and *$modx_base_url*.

{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}

Sometimes developers structure their development and production servers to use the _exact_ same path information, but often the file path information will change when we move our MODx web site to a new server. 

To see the path information that is stored inside the MODx database, type the following query into phpMyAdmin, the MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary, e.g. `modx_workspaces`.

If the path on the new server is different than on the old server, you will need to update this record. You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the domain name in your .htaccess file(s).

h2. On the New Server

Log into the manager on the new server to verify that it works. Upon entry, you may experience:
{noformat}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{noformat}

That&#39;s because the old path is still cached; MODx Revolution caches a lot of information in the database and on the file system, so once you&#39;ve gotten the files and  database transferred over to the new server, make sure you clear your site&#39;s cache once again, and manually refresh the manager page.

If the cache and session information was not cleared before the move you will need to do so, if you encounter errors within the manager after moving the site.


h2. Re-run setup (optional)

Whenever changes are made to a MODx Revolution site in regards to installs, upgrades, or change of location it can be helpful to re-run the domain.com/setup script. This should assist in solidifying the movement process due to the actions taken during its process.
* Make sure you are running the setup version from the same version of MODx Revolution you will be using.&amp;nbsp;
* Get the transferred site functional before attempting any version upgrades.

h2. Final thoughts

It would be wise to keep backups from the old server until the new site has undergone a couple of backup generations and everything has been verified.


Your site should now be up and running in its new location\!

{scrollbar}";}i:10;a:3:{s:2:"id";s:8:"33587234";s:3:"ver";s:1:"2";s:4:"code";s:8700:"MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  In Revolution, it&#39;s more or less the same process, but there are couple extra tidbits to watch out for due to Revolution&#39;s thorough caching mechanisms and how certain server-specific data is stored in its database.

Following is the official documentation of how to move your site to a new location.  Normally, the move is to a new server, but the steps here also apply if you move your site to a new folder on your current web server.


h2. Log into the Manager: Clear your Cache and Sessions

Before doing anything else, it would be wise to empty all of the cached content.

* Log into the manager, then: Site \--&gt; Clear Cache
* Clear your sessions: Security \--&gt; Flush All Sessions

The first benefit of this is a smaller download / upload file.

If necessary, it is also possible to simply delete contents contained within the core/cache folder.


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because each file must often undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes, it&#39;s easier to clean up the mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.

h2. Change File Ownership

Sometimes the group and user ownership will change when moving from one host to another. Make sure that the files are owned and accessible to the web server. You will have to check the server configuration to ascertain the correct settings, or simply ask the host for the details.  A simpler method may be to simply look at the ownership placed on the tar.gz file when it was uploaded to the server. FTP software will almost always set the proper ownership on an uploaded file.

h2. Writable: 777 or 755?

Some of the folders need to be may writable. Depending on the security configuration of the service this may need to be 755 or 777. The tar.gz file should retain the old server permissions \-\- but those may not work on the new server.



h2. Dumping your Database

You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility. (In the future, MODx will be able to run on other databases, but for now it runs on MySQL).

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}

If you are also moving your site into or out of a subfolder, be sure to update the variables such as *$modx_connectors_url* and *$modx_base_url*.

{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}

Sometimes developers structure their development and production servers to use the _exact_ same path information, but often the file path information will change when we move our MODx web site to a new server. 

To see the path information that is stored inside the MODx database, type the following query into phpMyAdmin, the MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary, e.g. `modx_workspaces`.

If the path on the new server is different than on the old server, you will need to update this record. You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the domain name in your .htaccess file(s).

h2. On the New Server

Log into the manager on the new server to verify that it works. Upon entry, you may experience:
{noformat}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{noformat}

That&#39;s because the old path is still cached; MODx Revolution caches a lot of information in the database and on the file system, so once you&#39;ve gotten the files and  database transferred over to the new server, make sure you clear your site&#39;s cache once again, and manually refresh the manager page.

If the cache and session information was not cleared before the move you will need to do so, if you encounter errors within the manager after moving the site.


h2. Re-run setup (optional)

Whenever changes are made to a MODx Revolution site in regards to installs, upgrades, or change of location it can be helpful to re-run the domain.com/setup script. This should assist in solidifying the movement process due to the actions taken during its process.
* Make sure you are running the setup version from the same version of MODx Revolution you will be using.&amp;nbsp;
* Get the transferred site functional before attempting any version upgrades.

h2. Final thoughts

It would be wise to keep backups from the old server until the new site has undergone a couple of backup generations and everything has been verified.


Your site should now be up and running in its new location\!

{scrollbar}";}i:11;a:3:{s:2:"id";s:8:"33227193";s:3:"ver";s:1:"1";s:4:"code";s:8905:"MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h2. Log into the Manager: Clear your Cache and Sessions

Before doing anything else, it would be wise to empty all of the cached content.

* Log into the manager, then: Site --&gt; Clear Cache
* Clear your sessions: Security --&gt; Flush All Sessions

The first benefit of this is a smaller download / upload file.&amp;nbsp;

If necessary, it is also possible to simply delete contents contained within the core/cache folder.


Failure to do so may lead to some issues on the new server.

Upon entry into the manager on the new hosting location, you may experience:
{noformat}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{noformat}

That&#39;s because the old path is still cached; MODx Revolution caches a  lot of information in the database.  Once you&#39;ve gotten the files and  database transferred over to the new server, make sure you clear your  site&#39;s cache of any lingering data that may contain the old file paths.

If the cache and session information was not cleared before the move you will need to do so, if you encounter errors within the manager after moving the site.


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.

h2. Change File Ownership

Sometimes the group and user ownership will change when moving from one host to another.&amp;nbsp; Make sure that the files are owned and accessible to the web server. You will have to check the server configuration to ascertaint he correct settings, or simply ask the host for the details.&amp;nbsp; A simpler method may be to simply look at the ownership placed on the tar.gz file when it was uploaded to the server.&amp;nbsp; FTP software will almost always set the proper ownership.

h2. Writable: 777 or 755?

Some of the folders need to be may writable. Depending on the security configuration of the service this may need to be 755 or 777. The tar.gz file should retain the old server permissions \-\- but those may not work on the new server.



h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}

If you are also moving your site into or out of a subfolder, be sure to update the variables such as *$modx_connectors_url* and *$modx_base_url*.

{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Re-run setup

Whenever changes are made to a MODx Revolution site in regards to installs, upgrades, or change of location it is recommended to re-run the domain.com/setup script. This should assist in solidifying the movement process due to the actions taken during its process.
* Make sure you are running the setup version from the same version of MODx Revolution you will be using.&amp;nbsp;
* Get the transferred site functional before attempting any version upgrades.

h2. Final thoughts

It would be wise to keep backups from the old server until the new site has undergone a couple of backup generations and everything has been verified.


Your site should now be up and running in its new location\!

{scrollbar}";}i:12;a:3:{s:2:"id";s:8:"33227191";s:3:"ver";s:1:"1";s:4:"code";s:8786:"MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h2. Log into the Manager: Clear your Cache and Sessions

Before doing anything else, it would be wise to empty all of the cached content.

{noformat}
Log into the manager, then: Site --&gt; Clear Cache
Finally, clear your sessions: Security --&gt; Flush All Sessions
{noformat}

The first benefit of this is a smaller download / upload file.&amp;nbsp;

If necessary, it is also possible to simply delete contents contained within the core/cache folder.


Failure to do so may lead to some issues on the new server.

Upon entry into the manager on the new hosting location, you may experience:
{noformat}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{noformat}

That&#39;s because the old path is still cached; MODx Revolution caches a  lot of information in the database.  Once you&#39;ve gotten the files and  database transferred over to the new server, make sure you clear your  site&#39;s cache of any lingering data that may contain the old file paths.

If the cache and session information was not cleared before the move you will need to do so, if you encounter errors within the manager after moving the site.


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.

h2. Change File Ownership

Sometimes the group and user ownership will change when moving from one host to another.&amp;nbsp; Make sure that the files are owned and accessible to the web server. You will have to check the server configuration to ascertaint he correct settings, or simply ask the host for the details.&amp;nbsp; A simpler method may be to simply look at the ownership placed on the tar.gz file when it was uploaded to the server.&amp;nbsp; FTP software will almost always set the proper ownership.

h2. Writable: 777 or 755?

Some of the folders need to be may writable. Depending on the security configuration of the service this may need to be 755 or 777. The tar.gz file should retain the old server permissions \-\- but those may not work on the new server.



h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Re-run setup

Whenever changes are made to a MODx Revolution site in regards to installs, upgrades, or change of location it is recommended to re-run the domain.com/setup script. This should assist in solidifying the movement process due to the actions taken during its process.
* Make sure you are running the setup version from the same version of MODx Revolution you will be using.&amp;nbsp;
* Get the transferred site functional before attempting any version upgrades.

h2. Final thoughts

It would be wise to keep backups from the old server until the new site has undergone a couple of backup generations and everything has been verified.


Your site should now be up and running in its new location\!

{scrollbar}";}i:13;a:3:{s:2:"id";s:8:"33227033";s:3:"ver";s:1:"1";s:4:"code";s:6881:"\\

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Log into the Manager: Clear your Cache and Sessions

By now you should be able to log into the manager, but when you first login you&#39;ll see an error message:
{code}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{code}

That&#39;s because the old path is still cached; MODx Revolution caches a lot of information in the database.  Once you&#39;ve gotten the files and database transferred over to the new server, make sure you clear your site&#39;s cache of any lingering data that may contain the old file paths.

Log into the manager, then: Site \--&gt; Clear Cache

Finally, clear your sessions: Security \--&gt; Flush All Sessions

Your site should now be up and running in its new location\!

{scrollbar}";}i:14;a:3:{s:2:"id";s:8:"33226967";s:3:"ver";s:1:"1";s:4:"code";s:7438:"\\

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).

{toc}

h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating config &amp; database

After dumping your database and filed on your new server (or subdirectory) you will need to update the config file and some minor changes in the database.

You can either do this manually, however usually running the setup in *upgrade* mode will usually do this perfectly fine. If your database login name/password/server address has changed, remember to use the *advanced* option. If running setup in upgrade or advanced mode does not properly update the paths, update the config file and the database manually.


h3. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h3. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Log into the Manager: Clear your Cache and Sessions

By now you should be able to log into the manager, but when you first login you&#39;ll see an error message:
{code}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{code}

That&#39;s because the old path is still cached; MODx Revolution caches a lot of information in the database.  Once you&#39;ve gotten the files and database transferred over to the new server, make sure you clear your site&#39;s cache of any lingering data that may contain the old file paths.

Log into the manager, then: Site \--&gt; Clear Cache

Finally, clear your sessions: Security \--&gt; Flush All Sessions

Your site should now be up and running in its new location\!

{scrollbar}";}i:15;a:3:{s:2:"id";s:8:"33226966";s:3:"ver";s:1:"1";s:4:"code";s:7466:"\\

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).

{toc-zone:location=top}

h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating config &amp; database

After dumping your database and filed on your new server (or subdirectory) you will need to update the config file and some minor changes in the database.

You can either do this manually, however usually running the setup in *upgrade* mode will usually do this perfectly fine. If your database login name/password/server address has changed, remember to use the *advanced* option. If running setup in upgrade or advanced mode does not properly update the paths, update the config file and the database manually.


h3. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h3. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Log into the Manager: Clear your Cache and Sessions

By now you should be able to log into the manager, but when you first login you&#39;ll see an error message:
{code}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{code}

That&#39;s because the old path is still cached; MODx Revolution caches a lot of information in the database.  Once you&#39;ve gotten the files and database transferred over to the new server, make sure you clear your site&#39;s cache of any lingering data that may contain the old file paths.

Log into the manager, then: Site \--&gt; Clear Cache

Finally, clear your sessions: Security \--&gt; Flush All Sessions

Your site should now be up and running in its new location\!

{scrollbar}{toc-zone}";}i:16;a:3:{s:2:"id";s:8:"33226965";s:3:"ver";s:1:"1";s:4:"code";s:7442:"\\

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).

{{toc}}



h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating config &amp; database

After dumping your database and filed on your new server (or subdirectory) you will need to update the config file and some minor changes in the database.

You can either do this manually, however usually running the setup in *upgrade* mode will usually do this perfectly fine. If your database login name/password/server address has changed, remember to use the *advanced* option. If running setup in upgrade or advanced mode does not properly update the paths, update the config file and the database manually.


h3. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h3. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Log into the Manager: Clear your Cache and Sessions

By now you should be able to log into the manager, but when you first login you&#39;ll see an error message:
{code}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{code}

That&#39;s because the old path is still cached; MODx Revolution caches a lot of information in the database.  Once you&#39;ve gotten the files and database transferred over to the new server, make sure you clear your site&#39;s cache of any lingering data that may contain the old file paths.

Log into the manager, then: Site \--&gt; Clear Cache

Finally, clear your sessions: Security \--&gt; Flush All Sessions

Your site should now be up and running in its new location\!

{scrollbar}";}i:17;a:3:{s:2:"id";s:8:"33226963";s:3:"ver";s:1:"1";s:4:"code";s:6881:"\\

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Log into the Manager: Clear your Cache and Sessions

By now you should be able to log into the manager, but when you first login you&#39;ll see an error message:
{code}
Could not find action file at: /path/to/manager/controllers/default/welcome.php
{code}

That&#39;s because the old path is still cached; MODx Revolution caches a lot of information in the database.  Once you&#39;ve gotten the files and database transferred over to the new server, make sure you clear your site&#39;s cache of any lingering data that may contain the old file paths.

Log into the manager, then: Site \--&gt; Clear Cache

Finally, clear your sessions: Security \--&gt; Flush All Sessions

Your site should now be up and running in its new location\!

{scrollbar}";}i:18;a:3:{s:2:"id";s:8:"23166982";s:3:"ver";s:1:"1";s:4:"code";s:6617:"\\

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
/* PATHS */
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;

/* HOST (used for command-line PHP stuff) */
$http_host=&#39;yoursite.com&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Clear your Cache and Sessions

MODx Revolution caches a lot of information in the database.  Once you&#39;ve gotten the files and database transferred over to the new server, make sure you clear your site&#39;s cache of any lingering data that may contain the old file paths. &amp;nbsp;

Log into the manager, then: Site \--&gt; Clear Cache

Finally, clear your sessions: Security \--&gt; Flush All Sessions

Your site should now be up and running in its new location\!

{scrollbar}";}i:19;a:3:{s:2:"id";s:8:"23166980";s:3:"ver";s:1:"1";s:4:"code";s:6524:"\\

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.

On the new server, you can simply use the &quot;mysql&quot; command to slurp the dump file into the new target database:
{code}
mysql -u username -p target_db &lt; my_revo_db.sql
{code}

You can also use phpMyAdmin, but remember that web-based tools like this are subject to the same memory limits as PHP, so you&#39;re usually better off using a command-line tool if possible.

h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Clear your Cache and Sessions

MODx Revolution caches a lot of information in the database.  Once you&#39;ve gotten the files and database transferred over to the new server, make sure you clear your site&#39;s cache of any lingering data that may contain the old file paths. &amp;nbsp;

Log into the manager, then: Site \--&gt; Clear Cache

Finally, clear your sessions: Security \--&gt; Flush All Sessions

Your site should now be up and running in its new location\!

{scrollbar}";}i:20;a:3:{s:2:"id";s:8:"23166978";s:3:"ver";s:1:"1";s:4:"code";s:6146:"\\

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.


h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Clear your Cache and Sessions

MODx Revolution caches a lot of information in the database.  Once you&#39;ve gotten the files and database transferred over to the new server, make sure you clear your site&#39;s cache of any lingering data that may contain the old file paths. &amp;nbsp;

Log into the manager, then: Site \--&gt; Clear Cache

Finally, clear your sessions: Security \--&gt; Flush All Sessions

Your site should now be up and running in its new location\!

{scrollbar}";}i:21;a:3:{s:2:"id";s:8:"22577160";s:3:"ver";s:1:"9";s:4:"code";s:6084:"\\

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.


h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Clear your Cache and Sessions

MODx Revolution caches a lot of information in the database.  Once you&#39;ve gotten the files and database transferred over to the new server, make sure you clear your site&#39;s cache of any lingering data that may contain the old file paths. &amp;nbsp;

Log into the manager, then: Site \--&gt; Clear Cache

Finally, clear your sessions: Security \--&gt; Flush All Sessions

{scrollbar}";}i:22;a:3:{s:2:"id";s:8:"22183966";s:3:"ver";s:1:"8";s:4:"code";s:6004:"\\

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.


h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Clear your Cache

MODx Revolution caches a lot of information in the database.  Once you&#39;ve gotten the files and database transferred over to the new server, make sure you clear your site&#39;s cache of any lingering data that may contain the old file paths. &amp;nbsp;

Log into the manager, then: Site \--&gt; Clear Cache

{scrollbar}";}i:23;a:3:{s:2:"id";s:8:"22183963";s:3:"ver";s:1:"7";s:4:"code";s:6010:"\\

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile&quot;.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.


h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Clear your Cache

MODx Revolution caches a lot of information in the database.  Once you&#39;ve gotten the files and database transferred over to the new server, make sure you clear your site&#39;s cache of any lingering data that may contain the old file paths. &amp;nbsp;

Log into the manager, then: Site \--&gt; Clear Cache

{scrollbar}";}i:24;a:3:{s:2:"id";s:8:"22183964";s:3:"ver";s:1:"7";s:4:"code";s:6010:"\\

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile&quot;.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.


h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Clear your Cache

MODx Revolution caches a lot of information in the database.  Once you&#39;ve gotten the files and database transferred over to the new server, make sure you clear your site&#39;s cache of any lingering data that may contain the old file paths. &amp;nbsp;

Log into the manager, then: Site \--&gt; Clear Cache

{scrollbar}";}i:25;a:3:{s:2:"id";s:8:"22183962";s:3:"ver";s:1:"6";s:4:"code";s:5988:"\\

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h2. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile&quot;.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h2. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.


h2. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h2. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h2. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

h2. Clear your Cache

MODx Revolution caches a lot of information in the database.  Once you&#39;ve gotten the files and database transferred over to the new server, make sure you clear your site&#39;s cache of any lingering data that may contain the old file paths.  

In the manager: Site --&gt; Clear Cache

{scrollbar}";}i:26;a:3:{s:2:"id";s:8:"22183961";s:3:"ver";s:1:"5";s:4:"code";s:5720:"\\

h2. Moving Your MODx Site to a New Server

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h3. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile&quot;.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h3. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.


h3. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;
{code}


{info:title=Permissions}
Before you can edit your config file, you may need to loosen up the permissions.  After you&#39;ve edited it, be sure you restore the read-only permissions on the file.
{info}

h3. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h3. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

{scrollbar}";}i:27;a:3:{s:2:"id";s:8:"22183959";s:3:"ver";s:1:"4";s:4:"code";s:5518:"\\

h2. Moving Your MODx Site to a New Server

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h3. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile&quot;.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h3. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.


h3. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;
{code}


h3. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

On the new server you need to update this record. &amp;nbsp;You can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query depending on your database, prefix, and the path to your data):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h3. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

{scrollbar}";}i:28;a:3:{s:2:"id";s:8:"22183956";s:3:"ver";s:1:"3";s:4:"code";s:5432:"\\

h2. Moving Your MODx Site to a New Server

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h3. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile&quot;.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

On a UNIX style system, you can unpackage a .tar.gz file using the following commands from a command line:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h3. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually it&#39;s best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.


h3. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;
{code}


h3. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

To update this row in the database, you can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h3. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

{scrollbar}";}i:29;a:3:{s:2:"id";s:8:"22183950";s:3:"ver";s:1:"2";s:4:"code";s:5383:"\\

h2. Moving Your MODx Site to a New Server

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h3. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is *C{*}reate *Z{*}ip *F{*}ile&quot;.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.

You can unpackage a .tar.gz file using the following commands:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h3. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually its best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.


h3. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;
{code}


h3. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

To update this row in the database, you can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database\! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h3. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

{scrollbar}";}i:30;a:3:{s:2:"id";s:8:"22183948";s:3:"ver";s:1:"1";s:4:"code";s:5384:"\\

h2. Moving Your MODx Site to a New Server

MODx Revolution is a database-driven web application, so moving it to a new server involves the typical porting over of both the database and all the site&#39;s files.  Those of you familiar with MODx Evolution may be in the habit of zipping up the files, grabbing a dump of the database, and then deploying them on the new server... but in Revolution, you may have discovered that maybe something broke in the process... maybe the manager only comes up as a white page.  It&#39;s more or less the same process, but there are couple extra tidbits to watch out for.

So here&#39;s the official documentation of how to move your site to a new location.  (Normally, this is to a new server, but the steps here also apply if you move your site to a new folder on your current web server).


h3. Packaging up your Files

Any time you pack up a site and move, it&#39;s best to package the files into &quot;boxes&quot; -- when you move out of your apartment, you put everything into boxes; the same concept is true with files: package them well.  If you simply drag and drop files from one server to another using a GUI interface, chances are good that the GUI will omit hidden files such as the vital _.htaccess_ file.  Besides, transferring hundreds of files via FTP can take a long time because with many servers, each file must undergo some sort of authentication; in other words copying over a hundred 1 megabyte files takes a lot longer than copying over a single 100 megabyte file.

On a UNIX style system, you can create a compressed file using the tar command:
{code}
tar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/
{code}

{info:title=Forget me Not}
A good mnemonic for the &quot;-czf&quot; option is &quot;*C*reate *Z*ip *F*ile&quot;.
{info}

Once you arrive on the other end, it&#39;s good to put the zipped file into its own directory before you extract it.  The idea here is that if it explodes and you have to scrape the files off the walls, it&#39;s easier to clean up a mess if it&#39;s contained in its own directory.  

You can unpackage a .tar.gz file using the following commands:
{code}
gunzip modx_revo_site.tar.gz
tar xvf modx_revo_site.tar
{code}

Once you&#39;ve extracted the files, you can move the whole directory into the correct place.  Again, be careful about moving files in bulk: you might inadvertently forget to copy those hidden files.  It&#39;s better to rename or move the containing directory instead.


h3. Dumping your Database

In the future, MODx will be able to run on other databases, but for now it runs on MySQL.  You can dump your MySQL database using a GUI tool such as phpMyAdmin, or you can run the command-line *mysqldump* utility.

{code}
mysqldump -u username -p your_revo_db &gt; /path/to/backups/my_revo_db.sql
{code}

If you use _mysqldump_, be sure you use a username that has SELECT and LOCK permissions on all your MODx Revolution database tables -- usually its best to simply use the same username and password that are defined in your configuration file (_/core/config/config.inc.php_).  Remember that _mysqldump_ will prompt you for the password after you execute this command: when you type it (or paste it), you won&#39;t see anything in the terminal window.


h3. Updating your Config File

Once you&#39;ve deployed files to the new server, you need to update the main configuration file: _core/config/config.inc.php_.  You have to update paths to *6* different resources.  Open the file and update the values for the following variables doing a find and replace:

{code}
$modx_core_path= &#39;/path/to/modx_doc_root/core/&#39;;
$modx_processors_path= &#39;/path/to/modx_doc_root/core/model/modx/processors/&#39;;
$modx_connectors_path= &#39;/path/to/modx_doc_root/connectors/&#39;;
$modx_manager_path= &#39;/path/to/modx_doc_root/manager/&#39;;
$modx_base_path= &#39;/path/to/modx_doc_root/&#39;;
$modx_assets_path= &#39;/path/to/modx_doc_root/assets/&#39;;
{code}


h3. Update your Database

Sometimes developers structure their development and production servers to use the _exact_ same path information, but for most of us, the file path information will change when we move our MODx web site to a new server. Take a look inside your Revolution database and see for yourself that path information is stored there. Type the following query into phpMyAdmin, a MySQL command line, or any other application that allows you to execute queries on your database:

{code}
SELECT `path` FROM `your_revo_db`.`workspaces`;
{code}

Change &quot;your_revo_db&quot; to your database name, and add an appropriate prefix to the &quot;workspaces&quot; table if necessary.

To update this row in the database, you can edit it using a GUI editor (like SQL-Yog or phpMyAdmin), or you can execute the following command (again, you need to customize the query):

{code}
UPDATE `your_revo_db`.`workspaces` SET path=&#39;/path/to/modx_doc_root/core/&#39; WHERE id=&#39;1&#39;;
{code}

{note:title=Don&#39;t Forget the Database}MODx stores some path data in its database! When you move servers, you may have to update the workspaces table, otherwise the manager page may show a white page.{note}


h3. Update .htaccess

When you change servers, you frequently wind up changing domain names.  Make sure you update any references to the old domain to the new one.

{scrollbar}";}}}