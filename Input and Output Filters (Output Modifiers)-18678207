a:5:{s:2:"id";s:8:"18678207";s:4:"info";a:4:{s:6:"Title:";s:43:"Input and Output Filters (Output Modifiers)";s:7:"Author:";s:15:"Shaun McCormick";s:16:"Last Changed by:";s:17:"Everett Griffiths";s:12:"Wiki Markup:";s:58:"[revolution20:Input and Output Filters (Output Modifiers)]";}s:6:"parent";s:8:"18678067";s:6:"source";s:13793:"{alias:Input and Output Filters}
\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

You can also use these to modify Snippet output; note that the modifier comes after the Snippet name and before the question mark, e.g.

{code}[[mySnippet:modifier=`value`? &amp;mySnippetParam=`something`]]{code}

h2. Output Modifiers

The following table lists some of the existing modifiers and shows examples of their use. Although the examples below are placeholder tags, the output modifiers can be used with any MODx tag. *Make sure that the placeholder used are actually receiving data.*


h3. Conditional output modifiers

{table-plus}





|| Modifier || Description || Example ||
| if, input | | |
| or \\ | Can be used to string output modifiers together with an &quot;OR&quot; relationship. \\ | \[\[+numbooks:is=`5`:or:is=`6`:then=`There are 5 or 6 books\!`:else=`Not sure how many books`\]\] |
| and \\ | Can be used to string output modifiers together with an &quot;AND&quot; relationship. \\ | |
| isequalto, isequal, equalto, equals, is, eq \\ | Compares to a passed value, and moves on if it&#39;s the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:isequalto=`5`:then=`There are 5 books\!`:else=`Not sure how many books`\]\] |
| notequalto, notequals, isnt, isnot, neq, ne \\ | Compares to a passed value, and moves on if it is not the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:notequalto=`5`:then=`Not sure how many books`:else=`There are 5 books\!`\]\] |
| greaterthanorequalto, equalorgreaterthen, ge, eg, isgte, gte \\ | Compares to a passed value, and moves on if it is greater than or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gte=`5`:then=`There are 5 books or more than 5 books`:else=`There are less than 5 books`\]\] \\ |
| isgreaterthan, greaterthan, isgt, gt \\ | Compares to a passed value, and moves on if it is greater than the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gt=`5`:then=`There are more than 5 books`:else=`There are less than 5 books`\]\] |
| equaltoorlessthan, lessthanorequalto, el, le, islte, lte \\ | Compares to a passed value, and moves on if it is less then or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:lte=`5`:then=`There are 5 or less than 5 books`:else=`There are more than 5 books`\]\] \\ |
| islowerthan, islessthan, lowerthan, lessthan, islt, lt \\ | Compares to a passed value, and moves on if it is less than the value. Used with &quot;then&quot; and &quot;else&quot;. | \[\[+numbooks:lte=`5`:then=`There are less than 5 books`:else=`There are more than 5 books`\]\] |
| hide \\ | Will check earlier conditions, and hide the element if the conditions were met. \\ | \[\[+numbooks:lt=`1`:hide\]\] \\ |
| show \\ | Will check earlier conditions, and show the element if the conditions were met. \\ | \[\[+numbooks:gt=`0`:show\]\] \\ |
| then \\ | Conditional usage. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`\]\] \\ |
| else \\ | Conditional usage, together with then. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`:else=`Sorry, currently sold out.`\]\] \\ |
| select \\ | | |
| memberof, ismember, mo \\ | Checks if the user is a member of the specified group(s). \\ | \[\[+modx.user.id:memberof=`Administrator`\]\] \\ |
{table-plus}

h3. String output modifiers

{table-plus}




|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase, lowercase, strtolower | Transforms strings to lowercase. Similar to PHP&#39;s [strtolower&amp;nbsp;|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase, uppercase, strtoupper | Transforms strings to uppercase. Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Transforms the first letter of a word to uppercase. Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Transforms the first letter of the string to uppercase.Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent, htmlentities | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; with flag ENT_QUOTES \\ | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values using regex and str_replace. Also escapes&amp;nbsp;\[, \] and ` | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| striptags, stripTags,notags,strip_tags | Accepts a value to indicate which tags to allow. Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags=`&lt;p&gt;`\]\] |
| len,length, strlen \\ | Counts the length of the passed string. Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse, strrev | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty, isempty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty,&amp;nbsp;\!empty, ifnotempty, isnotempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. See [Date Formats]. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. See [Date Formats]. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab, e.g. fullname, email. See Examples below. | \[\[+modx.user.id:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | \[\[+modx.user.id:isloggedin\]\] |
| isnotloggedin | Returns true if user is not authenticated in this context. | \[\[+modx.user.id:isnotloggedin\]\] |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns. If the snippet returns an empty string, the output will not be modified at all.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and specify it as the property of the output modifier, like so:
{code}
User Internal Key: [[!+modx.user.id:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[!+modx.user.id:userinfo=`username`]]&lt;br /&gt;
Full Name: [[!+modx.user.id:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[!+modx.user.id:userinfo=`role`]]&lt;br /&gt;
E-mail: [[!+modx.user.id:userinfo=`email`]]&lt;br /&gt;
Phone: [[!+modx.user.id:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[!+modx.user.id:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[!+modx.user.id:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[!+modx.user.id:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender: [[!+modx.user.id:userinfo=`gender`]]&lt;br /&gt;
Country: [[+modx.user.id:userinfo=`country`]]&lt;br /&gt;
State: [[+modx.user.id:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+modx.user.id:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+modx.user.id:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+modx.user.id:userinfo=`comment`]]&lt;br /&gt;
Password: [[+modx.user.id:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+modx.user.id:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+modx.user.id:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+modx.user.id:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+modx.user.id:userinfo=`logincount`]]
{code}

\[\[\!+modx.user.id\]\] defaults to the currently logged in user ID. You can of course replace that with \[\[*createdby\]\] or other resource field or placeholders that return a numeric ID representing a user.


{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[!+modx.user.id]] - Prints the ID
[[!+modx.user.username]] - Prints the username
{code}You will most likely want to call these uncached (see note about caching above) to prevent unexpected results.
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";s:8:"versions";a:29:{i:0;a:3:{s:2:"id";s:8:"18678207";s:3:"ver";s:1:"2";s:4:"code";s:13793:"{alias:Input and Output Filters}
\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

You can also use these to modify Snippet output; note that the modifier comes after the Snippet name and before the question mark, e.g.

{code}[[mySnippet:modifier=`value`? &amp;mySnippetParam=`something`]]{code}

h2. Output Modifiers

The following table lists some of the existing modifiers and shows examples of their use. Although the examples below are placeholder tags, the output modifiers can be used with any MODx tag. *Make sure that the placeholder used are actually receiving data.*


h3. Conditional output modifiers

{table-plus}





|| Modifier || Description || Example ||
| if, input | | |
| or \\ | Can be used to string output modifiers together with an &quot;OR&quot; relationship. \\ | \[\[+numbooks:is=`5`:or:is=`6`:then=`There are 5 or 6 books\!`:else=`Not sure how many books`\]\] |
| and \\ | Can be used to string output modifiers together with an &quot;AND&quot; relationship. \\ | |
| isequalto, isequal, equalto, equals, is, eq \\ | Compares to a passed value, and moves on if it&#39;s the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:isequalto=`5`:then=`There are 5 books\!`:else=`Not sure how many books`\]\] |
| notequalto, notequals, isnt, isnot, neq, ne \\ | Compares to a passed value, and moves on if it is not the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:notequalto=`5`:then=`Not sure how many books`:else=`There are 5 books\!`\]\] |
| greaterthanorequalto, equalorgreaterthen, ge, eg, isgte, gte \\ | Compares to a passed value, and moves on if it is greater than or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gte=`5`:then=`There are 5 books or more than 5 books`:else=`There are less than 5 books`\]\] \\ |
| isgreaterthan, greaterthan, isgt, gt \\ | Compares to a passed value, and moves on if it is greater than the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gt=`5`:then=`There are more than 5 books`:else=`There are less than 5 books`\]\] |
| equaltoorlessthan, lessthanorequalto, el, le, islte, lte \\ | Compares to a passed value, and moves on if it is less then or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:lte=`5`:then=`There are 5 or less than 5 books`:else=`There are more than 5 books`\]\] \\ |
| islowerthan, islessthan, lowerthan, lessthan, islt, lt \\ | Compares to a passed value, and moves on if it is less than the value. Used with &quot;then&quot; and &quot;else&quot;. | \[\[+numbooks:lte=`5`:then=`There are less than 5 books`:else=`There are more than 5 books`\]\] |
| hide \\ | Will check earlier conditions, and hide the element if the conditions were met. \\ | \[\[+numbooks:lt=`1`:hide\]\] \\ |
| show \\ | Will check earlier conditions, and show the element if the conditions were met. \\ | \[\[+numbooks:gt=`0`:show\]\] \\ |
| then \\ | Conditional usage. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`\]\] \\ |
| else \\ | Conditional usage, together with then. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`:else=`Sorry, currently sold out.`\]\] \\ |
| select \\ | | |
| memberof, ismember, mo \\ | Checks if the user is a member of the specified group(s). \\ | \[\[+modx.user.id:memberof=`Administrator`\]\] \\ |
{table-plus}

h3. String output modifiers

{table-plus}




|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase, lowercase, strtolower | Transforms strings to lowercase. Similar to PHP&#39;s [strtolower&amp;nbsp;|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase, uppercase, strtoupper | Transforms strings to uppercase. Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Transforms the first letter of a word to uppercase. Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Transforms the first letter of the string to uppercase.Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent, htmlentities | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; with flag ENT_QUOTES \\ | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values using regex and str_replace. Also escapes&amp;nbsp;\[, \] and ` | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| striptags, stripTags,notags,strip_tags | Accepts a value to indicate which tags to allow. Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags=`&lt;p&gt;`\]\] |
| len,length, strlen \\ | Counts the length of the passed string. Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse, strrev | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty, isempty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty,&amp;nbsp;\!empty, ifnotempty, isnotempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. See [Date Formats]. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. See [Date Formats]. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab, e.g. fullname, email. See Examples below. | \[\[+modx.user.id:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | \[\[+modx.user.id:isloggedin\]\] |
| isnotloggedin | Returns true if user is not authenticated in this context. | \[\[+modx.user.id:isnotloggedin\]\] |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns. If the snippet returns an empty string, the output will not be modified at all.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and specify it as the property of the output modifier, like so:
{code}
User Internal Key: [[!+modx.user.id:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[!+modx.user.id:userinfo=`username`]]&lt;br /&gt;
Full Name: [[!+modx.user.id:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[!+modx.user.id:userinfo=`role`]]&lt;br /&gt;
E-mail: [[!+modx.user.id:userinfo=`email`]]&lt;br /&gt;
Phone: [[!+modx.user.id:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[!+modx.user.id:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[!+modx.user.id:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[!+modx.user.id:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender: [[!+modx.user.id:userinfo=`gender`]]&lt;br /&gt;
Country: [[+modx.user.id:userinfo=`country`]]&lt;br /&gt;
State: [[+modx.user.id:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+modx.user.id:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+modx.user.id:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+modx.user.id:userinfo=`comment`]]&lt;br /&gt;
Password: [[+modx.user.id:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+modx.user.id:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+modx.user.id:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+modx.user.id:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+modx.user.id:userinfo=`logincount`]]
{code}

\[\[\!+modx.user.id\]\] defaults to the currently logged in user ID. You can of course replace that with \[\[*createdby\]\] or other resource field or placeholders that return a numeric ID representing a user.


{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[!+modx.user.id]] - Prints the ID
[[!+modx.user.username]] - Prints the username
{code}You will most likely want to call these uncached (see note about caching above) to prevent unexpected results.
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:1;a:3:{s:2:"id";s:8:"39355811";s:3:"ver";s:1:"2";s:4:"code";s:13787:"{alias:Input and Output Filters}
\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

You can also use these to modify Snippet output; note that the modifier comes after the Snippet name and before the question mark, e.g.

{code}[[mySnippet:modifier=`value`? &amp;mySnippetParam=`something`]]{code}

h2. Output Modifiers

The following table lists some of the existing modifiers and shows examples of their use. Although the examples below are placeholder tags, the output modifiers can be used with any MODx tag. *Make sure that the placeholder used are actually receiving data.*


h3. Conditional output modifiers

{table-plus}





|| Modifier || Description || Example ||
| if, input | | |
| or \\ | Can be used to string output modifiers together with an &quot;OR&quot; relationship. \\ | \[\[+numbooks:is=`5`:or:is=`6`:then=`There are 5 or 6 books\!`:else=`Not sure how many books`\]\] |
| and \\ | Can be used to string output modifiers together with an &quot;AND&quot; relationship. \\ | |
| isequalto, isequal, equalto, equals, is, eq \\ | Compares to a passed value, and moves on if it&#39;s the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:isequalto=`5`:then=`There are 5 books\!`:else=`Not sure how many books`\]\] |
| notequalto, notequals, isnt, isnot, neq, ne \\ | Compares to a passed value, and moves on if it is not the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:notequalto=`5`:then=`Not sure how many books`:else=`There are 5 books\!`\]\] |
| greaterthanorequalto, equalorgreaterthen, ge, eg, isgte, gte \\ | Compares to a passed value, and moves on if it is greater than or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gte=`5`:then=`There are 5 books or more than 5 books`:else=`There are less than 5 books`\]\] \\ |
| isgreaterthan, greaterthan, isgt, gt \\ | Compares to a passed value, and moves on if it is greater than the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gt=`5`:then=`There are more than 5 books`:else=`There are less than 5 books`\]\] |
| equaltoorlessthan, lessthanorequalto, el, le, islte, lte \\ | Compares to a passed value, and moves on if it is less then or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:lte=`5`:then=`There are 5 or less than 5 books`:else=`There are more than 5 books`\]\] \\ |
| islowerthan, islessthan, lowerthan, lessthan, islt, lt \\ | Compares to a passed value, and moves on if it is less than the value. Used with &quot;then&quot; and &quot;else&quot;. | \[\[+numbooks:lte=`5`:then=`There are less than 5 books`:else=`There are more than 5 books`\]\] |
| hide \\ | Will check earlier conditions, and hide the element if the conditions were met. \\ | \[\[+numbooks:lt=`1`:hide\]\] \\ |
| show \\ | Will check earlier conditions, and show the element if the conditions were met. \\ | \[\[+numbooks:gt=`0`:show\]\] \\ |
| then \\ | Conditional usage. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`\]\] \\ |
| else \\ | Conditional usage, together with then. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`:else=`Sorry, currently sold out.`\]\] \\ |
| select \\ | | |
| memberof, ismember, mo \\ | Checks if the user is a member of the specified group(s). \\ | \[\[+modx.user.id:memberof=`Administrator`\]\] \\ |
{table-plus}

h3. String output modifiers

{table-plus}




|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase, lowercase, strtolower | Transforms strings to lowercase. Similar to PHP&#39;s [strtolower&amp;nbsp;|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase, uppercase, strtoupper | Transforms strings to uppercase. Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Transforms the first letter of a word to uppercase. Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Transforms the first letter of the string to uppercase.Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent, htmlentities | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; with flag ENT_QUOTES \\ | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values using regex and str_replace. Also escapes&amp;nbsp;\[, \] and ` | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| striptags, stripTags,notags,strip_tags | Accepts a value to indicate which tags to allow. Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags=`&lt;p&gt;`\]\] |
| len,length, strlen \\ | Counts the length of the passed string. Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse, strrev | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty, isempty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty,&amp;nbsp;\!empty, ifnotempty, isnotempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. See [Date Formats]. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. See [Date Formats]. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab, e.g. username, fullname, email, zip | \[\[+modx.user.id:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | \[\[+modx.user.id:isloggedin\]\] |
| isnotloggedin | Returns true if user is not authenticated in this context. | \[\[+modx.user.id:isnotloggedin\]\] |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns. If the snippet returns an empty string, the output will not be modified at all.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and specify it as the property of the output modifier, like so:
{code}
User Internal Key: [[!+modx.user.id:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[!+modx.user.id:userinfo=`username`]]&lt;br /&gt;
Full Name: [[!+modx.user.id:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[!+modx.user.id:userinfo=`role`]]&lt;br /&gt;
E-mail: [[!+modx.user.id:userinfo=`email`]]&lt;br /&gt;
Phone: [[!+modx.user.id:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[!+modx.user.id:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[!+modx.user.id:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[!+modx.user.id:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender: [[!+modx.user.id:userinfo=`gender`]]&lt;br /&gt;
Country: [[+modx.user.id:userinfo=`country`]]&lt;br /&gt;
State: [[+modx.user.id:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+modx.user.id:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+modx.user.id:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+modx.user.id:userinfo=`comment`]]&lt;br /&gt;
Password: [[+modx.user.id:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+modx.user.id:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+modx.user.id:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+modx.user.id:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+modx.user.id:userinfo=`logincount`]]
{code}

\[\[\!+modx.user.id\]\] defaults to the currently logged in user ID. You can of course replace that with \[\[*createdby\]\] or other resource field or placeholders that return a numeric ID representing a user.


{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[!+modx.user.id]] - Prints the ID
[[!+modx.user.username]] - Prints the username
{code}You will most likely want to call these uncached (see note about caching above) to prevent unexpected results.
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:2;a:3:{s:2:"id";s:8:"39355810";s:3:"ver";s:1:"2";s:4:"code";s:13751:"{alias:Input and Output Filters}
\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

You can also use these to modify Snippet output; note that the modifier comes after the Snippet name and before the question mark, e.g.

{code}[[mySnippet:modifier=`value`? &amp;mySnippetParam=`something`]]{code}

h2. Output Modifiers

The following table lists some of the existing modifiers and shows examples of their use. Although the examples below are placeholder tags, the output modifiers can be used with any MODx tag. *Make sure that the placeholder used are actually receiving data.*


h3. Conditional output modifiers

{table-plus}





|| Modifier || Description || Example ||
| if, input | | |
| or \\ | Can be used to string output modifiers together with an &quot;OR&quot; relationship. \\ | \[\[+numbooks:is=`5`:or:is=`6`:then=`There are 5 or 6 books\!`:else=`Not sure how many books`\]\] |
| and \\ | Can be used to string output modifiers together with an &quot;AND&quot; relationship. \\ | |
| isequalto, isequal, equalto, equals, is, eq \\ | Compares to a passed value, and moves on if it&#39;s the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:isequalto=`5`:then=`There are 5 books\!`:else=`Not sure how many books`\]\] |
| notequalto, notequals, isnt, isnot, neq, ne \\ | Compares to a passed value, and moves on if it is not the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:notequalto=`5`:then=`Not sure how many books`:else=`There are 5 books\!`\]\] |
| greaterthanorequalto, equalorgreaterthen, ge, eg, isgte, gte \\ | Compares to a passed value, and moves on if it is greater than or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gte=`5`:then=`There are 5 books or more than 5 books`:else=`There are less than 5 books`\]\] \\ |
| isgreaterthan, greaterthan, isgt, gt \\ | Compares to a passed value, and moves on if it is greater than the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gt=`5`:then=`There are more than 5 books`:else=`There are less than 5 books`\]\] |
| equaltoorlessthan, lessthanorequalto, el, le, islte, lte \\ | Compares to a passed value, and moves on if it is less then or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:lte=`5`:then=`There are 5 or less than 5 books`:else=`There are more than 5 books`\]\] \\ |
| islowerthan, islessthan, lowerthan, lessthan, islt, lt \\ | Compares to a passed value, and moves on if it is less than the value. Used with &quot;then&quot; and &quot;else&quot;. | \[\[+numbooks:lte=`5`:then=`There are less than 5 books`:else=`There are more than 5 books`\]\] |
| hide \\ | Will check earlier conditions, and hide the element if the conditions were met. \\ | \[\[+numbooks:lt=`1`:hide\]\] \\ |
| show \\ | Will check earlier conditions, and show the element if the conditions were met. \\ | \[\[+numbooks:gt=`0`:show\]\] \\ |
| then \\ | Conditional usage. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`\]\] \\ |
| else \\ | Conditional usage, together with then. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`:else=`Sorry, currently sold out.`\]\] \\ |
| select \\ | | |
| memberof, ismember, mo \\ | Checks if the user is a member of the specified group(s). \\ | \[\[+modx.user.id:memberof=`Administrator`\]\] \\ |
{table-plus}

h3. String output modifiers

{table-plus}




|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase, lowercase, strtolower | Transforms strings to lowercase. Similar to PHP&#39;s [strtolower&amp;nbsp;|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase, uppercase, strtoupper | Transforms strings to uppercase. Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Transforms the first letter of a word to uppercase. Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Transforms the first letter of the string to uppercase.Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent, htmlentities | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; with flag ENT_QUOTES \\ | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values using regex and str_replace. Also escapes&amp;nbsp;\[, \] and ` | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| striptags, stripTags,notags,strip_tags | Accepts a value to indicate which tags to allow. Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags=`&lt;p&gt;`\]\] |
| len,length, strlen \\ | Counts the length of the passed string. Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse, strrev | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty, isempty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty,&amp;nbsp;\!empty, ifnotempty, isnotempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. See [Date Formats]. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. See [Date Formats]. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+modx.user.id:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | \[\[+modx.user.id:isloggedin\]\] |
| isnotloggedin | Returns true if user is not authenticated in this context. | \[\[+modx.user.id:isnotloggedin\]\] |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns. If the snippet returns an empty string, the output will not be modified at all.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and specify it as the property of the output modifier, like so:
{code}
User Internal Key: [[!+modx.user.id:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[!+modx.user.id:userinfo=`username`]]&lt;br /&gt;
Full Name: [[!+modx.user.id:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[!+modx.user.id:userinfo=`role`]]&lt;br /&gt;
E-mail: [[!+modx.user.id:userinfo=`email`]]&lt;br /&gt;
Phone: [[!+modx.user.id:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[!+modx.user.id:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[!+modx.user.id:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[!+modx.user.id:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender: [[!+modx.user.id:userinfo=`gender`]]&lt;br /&gt;
Country: [[+modx.user.id:userinfo=`country`]]&lt;br /&gt;
State: [[+modx.user.id:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+modx.user.id:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+modx.user.id:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+modx.user.id:userinfo=`comment`]]&lt;br /&gt;
Password: [[+modx.user.id:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+modx.user.id:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+modx.user.id:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+modx.user.id:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+modx.user.id:userinfo=`logincount`]]
{code}

\[\[\!+modx.user.id\]\] defaults to the currently logged in user ID. You can of course replace that with \[\[*createdby\]\] or other resource field or placeholders that return a numeric ID representing a user.


{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[!+modx.user.id]] - Prints the ID
[[!+modx.user.username]] - Prints the username
{code}You will most likely want to call these uncached (see note about caching above) to prevent unexpected results.
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:3;a:3:{s:2:"id";s:8:"37683629";s:3:"ver";s:1:"2";s:4:"code";s:13651:"{alias:Input and Output Filters}
\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

You can also use these to modify Snippet output; note that the modifier comes after the Snippet name and before the question mark, e.g.

{code}[[mySnippet:modifier=`value`? &amp;mySnippetParam=`something`]]{code}

h2. Output Modifiers

The following table lists some of the existing modifiers and shows examples of their use. Although the examples below are placeholder tags, the output modifiers can be used with any MODx tag. *Make sure that the placeholder used are actually receiving data.*


h3. Conditional output modifiers

{table-plus}




|| Modifier || Description || Example ||
| if, input | | |
| or \\ | Can be used to string output modifiers together with an &quot;OR&quot; relationship. \\ | |
| and \\ | Can be used to string output modifiers together with an &quot;AND&quot; relationship. \\ | |
| isequalto, isequal, equalto, equals, is, eq \\ | Compares to a passed value, and moves on if it&#39;s the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:isequalto=`5`:then=`There are 5 books\!`:else=`Not sure how many books`\]\] |
| notequalto, notequals, isnt, isnot, neq, ne \\ | Compares to a passed value, and moves on if it is not the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:notequalto=`5`:then=`Not sure how many books`:else=`There are 5 books\!`\]\] |
| greaterthanorequalto, equalorgreaterthen, ge, eg, isgte, gte \\ | Compares to a passed value, and moves on if it is greater than or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gte=`5`:then=`There are 5 books or more than 5 books`:else=`There are less than 5 books`\]\] \\ |
| isgreaterthan, greaterthan, isgt, gt \\ | Compares to a passed value, and moves on if it is greater than the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gt=`5`:then=`There are more than 5 books`:else=`There are less than 5 books`\]\] |
| equaltoorlessthan, lessthanorequalto, el, le, islte, lte \\ | Compares to a passed value, and moves on if it is less then or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:lte=`5`:then=`There are 5 or less than 5 books`:else=`There are more than 5 books`\]\] \\ |
| islowerthan, islessthan, lowerthan, lessthan, islt, lt \\ | Compares to a passed value, and moves on if it is less than the value. Used with &quot;then&quot; and &quot;else&quot;. | \[\[+numbooks:lte=`5`:then=`There are less than 5 books`:else=`There are more than 5 books`\]\] |
| hide \\ | Will check earlier conditions, and hide the element if the conditions were met. \\ | \[\[+numbooks:lt=`1`:hide\]\] \\ |
| show \\ | Will check earlier conditions, and show the element if the conditions were met. \\ | \[\[+numbooks:gt=`0`:show\]\] \\ |
| then \\ | Conditional usage. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`\]\] \\ |
| else \\ | Conditional usage, together with then. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`:else=`Sorry, currently sold out.`\]\] \\ |
| select \\ | | |
| memberof, ismember, mo \\ | Checks if the user is a member of the specified group(s). \\ | \[\[+modx.user.id:memberof=`Administrator`\]\] \\ |
{table-plus}

h3. String output modifiers

{table-plus}



|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase, lowercase, strtolower | Transforms strings to lowercase. Similar to PHP&#39;s [strtolower&amp;nbsp;|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase, uppercase, strtoupper | Transforms strings to uppercase. Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Transforms the first letter of a word to uppercase. Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Transforms the first letter of the string to uppercase.Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent, htmlentities | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; with flag ENT_QUOTES \\ | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values using regex and str_replace. Also escapes&amp;nbsp;\[, \] and ` | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| striptags, stripTags,notags,strip_tags | Accepts a value to indicate which tags to allow. Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags=`&lt;p&gt;`\]\] |
| len,length, strlen \\ | Counts the length of the passed string. Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse, strrev | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty, isempty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty,&amp;nbsp;\!empty, ifnotempty, isnotempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. See [Date Formats]. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. See [Date Formats]. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+modx.user.id:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | \[\[+modx.user.id:isloggedin\]\] |
| isnotloggedin | Returns true if user is not authenticated in this context. | \[\[+modx.user.id:isnotloggedin\]\] |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns. If the snippet returns an empty string, the output will not be modified at all.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and specify it as the property of the output modifier, like so:
{code}
User Internal Key: [[!+modx.user.id:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[!+modx.user.id:userinfo=`username`]]&lt;br /&gt;
Full Name: [[!+modx.user.id:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[!+modx.user.id:userinfo=`role`]]&lt;br /&gt;
E-mail: [[!+modx.user.id:userinfo=`email`]]&lt;br /&gt;
Phone: [[!+modx.user.id:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[!+modx.user.id:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[!+modx.user.id:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[!+modx.user.id:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender: [[!+modx.user.id:userinfo=`gender`]]&lt;br /&gt;
Country: [[+modx.user.id:userinfo=`country`]]&lt;br /&gt;
State: [[+modx.user.id:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+modx.user.id:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+modx.user.id:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+modx.user.id:userinfo=`comment`]]&lt;br /&gt;
Password: [[+modx.user.id:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+modx.user.id:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+modx.user.id:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+modx.user.id:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+modx.user.id:userinfo=`logincount`]]
{code}

\[\[\!+modx.user.id\]\] defaults to the currently logged in user ID. You can of course replace that with \[\[*createdby\]\] or other resource field or placeholders that return a numeric ID representing a user.


{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[!+modx.user.id]] - Prints the ID
[[!+modx.user.username]] - Prints the username
{code}You will most likely want to call these uncached (see note about caching above) to prevent unexpected results.
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:4;a:3:{s:2:"id";s:8:"37126231";s:3:"ver";s:1:"2";s:4:"code";s:13571:"{alias:Input and Output Filters}
\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

You can also use these to modify Snippet output; note that the modifier comes after the Snippet name and before the question mark, e.g.

{code}[[mySnippet:modifier=`value`? &amp;mySnippetParam=`something`]]{code}

h2. Output Modifiers

The following table lists some of the existing modifiers and shows examples of their use. Although the examples below are placeholder tags, the output modifiers can be used with any MODx tag. *Make sure that the placeholder used are actually receiving data.*


h3. Conditional output modifiers

{table-plus}




|| Modifier || Description || Example ||
| if, input | | |
| or \\ | Can be used to string output modifiers together with an &quot;OR&quot; relationship. \\ | |
| and \\ | Can be used to string output modifiers together with an &quot;AND&quot; relationship. \\ | |
| isequalto, isequal, equalto, equals, is, eq \\ | Compares to a passed value, and moves on if it&#39;s the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:isequalto=`5`:then=`There are 5 books\!`:else=`Not sure how many books`\]\] |
| notequalto, notequals, isnt, isnot, neq, ne \\ | Compares to a passed value, and moves on if it is not the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:notequalto=`5`:then=`Not sure how many books`:else=`There are 5 books\!`\]\] |
| greaterthanorequalto, equalorgreaterthen, ge, eg, isgte, gte \\ | Compares to a passed value, and moves on if it is greater than or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gte=`5`:then=`There are 5 books or more than 5 books`:else=`There are less than 5 books`\]\] \\ |
| isgreaterthan, greaterthan, isgt, gt \\ | Compares to a passed value, and moves on if it is greater than the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gt=`5`:then=`There are more than 5 books`:else=`There are less than 5 books`\]\] |
| equaltoorlessthan, lessthanorequalto, el, le, islte, lte \\ | Compares to a passed value, and moves on if it is less then or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:lte=`5`:then=`There are 5 or less than 5 books`:else=`There are more than 5 books`\]\] \\ |
| islowerthan, islessthan, lowerthan, lessthan, islt, lt \\ | Compares to a passed value, and moves on if it is less than the value. Used with &quot;then&quot; and &quot;else&quot;. | \[\[+numbooks:lte=`5`:then=`There are less than 5 books`:else=`There are more than 5 books`\]\] |
| hide \\ | Will check earlier conditions, and hide the element if the conditions were met. \\ | \[\[+numbooks:lt=`1`:hide\]\] \\ |
| show \\ | Will check earlier conditions, and show the element if the conditions were met. \\ | \[\[+numbooks:gt=`0`:show\]\] \\ |
| then \\ | Conditional usage. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`\]\] \\ |
| else \\ | Conditional usage, together with then. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`:else=`Sorry, currently sold out.`\]\] \\ |
| select \\ | | |
| memberof, ismember, mo \\ | Checks if the user is a member of the specified group(s). \\ | \[\[+modx.user.id:memberof=`Administrator`\]\] \\ |
{table-plus}

h3. String output modifiers

{table-plus}



|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase, lowercase, strtolower | Transforms strings to lowercase. Similar to PHP&#39;s [strtolower&amp;nbsp;|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase, uppercase, strtoupper | Transforms strings to uppercase. Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Transforms the first letter of a word to uppercase. Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Transforms the first letter of the string to uppercase.Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent, htmlentities | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; with flag ENT_QUOTES \\ | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values using regex and str_replace. Also escapes&amp;nbsp;\[, \] and ` | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| striptags, stripTags,notags,strip_tags | Accepts a value to indicate which tags to allow. Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags=`&lt;p&gt;`\]\] |
| len,length, strlen \\ | Counts the length of the passed string. Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse, strrev | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty, isempty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty,&amp;nbsp;\!empty, ifnotempty, isnotempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. See [Date Formats]. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. See [Date Formats]. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+modx.user.id:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | \[\[+modx.user.id:isloggedin\]\] |
| isnotloggedin | Returns true if user is not authenticated in this context. | \[\[+modx.user.id:isnotloggedin\]\] |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and specify it as the property of the output modifier, like so:
{code}
User Internal Key: [[!+modx.user.id:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[!+modx.user.id:userinfo=`username`]]&lt;br /&gt;
Full Name: [[!+modx.user.id:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[!+modx.user.id:userinfo=`role`]]&lt;br /&gt;
E-mail: [[!+modx.user.id:userinfo=`email`]]&lt;br /&gt;
Phone: [[!+modx.user.id:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[!+modx.user.id:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[!+modx.user.id:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[!+modx.user.id:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender: [[!+modx.user.id:userinfo=`gender`]]&lt;br /&gt;
Country: [[+modx.user.id:userinfo=`country`]]&lt;br /&gt;
State: [[+modx.user.id:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+modx.user.id:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+modx.user.id:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+modx.user.id:userinfo=`comment`]]&lt;br /&gt;
Password: [[+modx.user.id:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+modx.user.id:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+modx.user.id:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+modx.user.id:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+modx.user.id:userinfo=`logincount`]]
{code}

\[\[\!+modx.user.id\]\] defaults to the currently logged in user ID. You can of course replace that with \[\[*createdby\]\] or other resource field or placeholders that return a numeric ID representing a user.


{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[!+modx.user.id]] - Prints the ID
[[!+modx.user.username]] - Prints the username
{code}You will most likely want to call these uncached (see note about caching above) to prevent unexpected results.
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:5;a:3:{s:2:"id";s:8:"35586252";s:3:"ver";s:1:"2";s:4:"code";s:13357:"{alias:Input and Output Filters}
\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

h2. Output Modifiers

The following table lists some of the existing modifiers and shows examples of their use. Although the examples below are placeholder tags, the output modifiers can be used with any MODx tag. *Make sure that the placeholder used are actually receiving data.*


h3. Conditional output modifiers

{table-plus}




|| Modifier || Description || Example ||
| if, input | | |
| or \\ | Can be used to string output modifiers together with an &quot;OR&quot; relationship. \\ | |
| and \\ | Can be used to string output modifiers together with an &quot;AND&quot; relationship. \\ | |
| isequalto, isequal, equalto, equals, is, eq \\ | Compares to a passed value, and moves on if it&#39;s the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:isequalto=`5`:then=`There are 5 books\!`:else=`Not sure how many books`\]\] |
| notequalto, notequals, isnt, isnot, neq, ne \\ | Compares to a passed value, and moves on if it is not the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:notequalto=`5`:then=`Not sure how many books`:else=`There are 5 books\!`\]\] |
| greaterthanorequalto, equalorgreaterthen, ge, eg, isgte, gte \\ | Compares to a passed value, and moves on if it is greater than or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gte=`5`:then=`There are 5 books or more than 5 books`:else=`There are less than 5 books`\]\] \\ |
| isgreaterthan, greaterthan, isgt, gt \\ | Compares to a passed value, and moves on if it is greater than the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gt=`5`:then=`There are more than 5 books`:else=`There are less than 5 books`\]\] |
| equaltoorlessthan, lessthanorequalto, el, le, islte, lte \\ | Compares to a passed value, and moves on if it is less then or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:lte=`5`:then=`There are 5 or less than 5 books`:else=`There are more than 5 books`\]\] \\ |
| islowerthan, islessthan, lowerthan, lessthan, islt, lt \\ | Compares to a passed value, and moves on if it is less than the value. Used with &quot;then&quot; and &quot;else&quot;. | \[\[+numbooks:lte=`5`:then=`There are less than 5 books`:else=`There are more than 5 books`\]\] |
| hide \\ | Will check earlier conditions, and hide the element if the conditions were met. \\ | \[\[+numbooks:lt=`1`:hide\]\] \\ |
| show \\ | Will check earlier conditions, and show the element if the conditions were met. \\ | \[\[+numbooks:gt=`0`:show\]\] \\ |
| then \\ | Conditional usage. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`\]\] \\ |
| else \\ | Conditional usage, together with then. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`:else=`Sorry, currently sold out.`\]\] \\ |
| select \\ | | |
| memberof, ismember, mo \\ | Checks if the user is a member of the specified group(s). \\ | \[\[+modx.user.id:memberof=`Administrator`\]\] \\ |
{table-plus}

h3. String output modifiers

{table-plus}



|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase, lowercase, strtolower | Transforms strings to lowercase. Similar to PHP&#39;s [strtolower&amp;nbsp;|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase, uppercase, strtoupper | Transforms strings to uppercase. Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Transforms the first letter of a word to uppercase. Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Transforms the first letter of the string to uppercase.Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent, htmlentities | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; with flag ENT_QUOTES \\ | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values using regex and str_replace. Also escapes&amp;nbsp;\[, \] and ` | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| striptags, stripTags,notags,strip_tags | Accepts a value to indicate which tags to allow. Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags=`&lt;p&gt;`\]\] |
| len,length, strlen \\ | Counts the length of the passed string. Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse, strrev | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty, isempty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty,&amp;nbsp;\!empty, ifnotempty, isnotempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. See [Date Formats]. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. See [Date Formats]. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+modx.user.id:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | \[\[+modx.user.id:isloggedin\]\] |
| isnotloggedin | Returns true if user is not authenticated in this context. | \[\[+modx.user.id:isnotloggedin\]\] |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and specify it as the property of the output modifier, like so:
{code}
User Internal Key: [[!+modx.user.id:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[!+modx.user.id:userinfo=`username`]]&lt;br /&gt;
Full Name: [[!+modx.user.id:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[!+modx.user.id:userinfo=`role`]]&lt;br /&gt;
E-mail: [[!+modx.user.id:userinfo=`email`]]&lt;br /&gt;
Phone: [[!+modx.user.id:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[!+modx.user.id:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[!+modx.user.id:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[!+modx.user.id:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender: [[!+modx.user.id:userinfo=`gender`]]&lt;br /&gt;
Country: [[+modx.user.id:userinfo=`country`]]&lt;br /&gt;
State: [[+modx.user.id:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+modx.user.id:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+modx.user.id:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+modx.user.id:userinfo=`comment`]]&lt;br /&gt;
Password: [[+modx.user.id:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+modx.user.id:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+modx.user.id:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+modx.user.id:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+modx.user.id:userinfo=`logincount`]]
{code}

\[\[\!+modx.user.id\]\] defaults to the currently logged in user ID. You can of course replace that with \[\[*createdby\]\] or other resource field or placeholders that return a numeric ID representing a user.


{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[!+modx.user.id]] - Prints the ID
[[!+modx.user.username]] - Prints the username
{code}You will most likely want to call these uncached (see note about caching above) to prevent unexpected results.
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:6;a:3:{s:2:"id";s:8:"35095338";s:3:"ver";s:1:"2";s:4:"code";s:13157:"{alias:Input and Output Filters}
\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

h2. Output Modifiers

The following table lists some of the existing modifiers and shows examples of their use. Although the examples below are placeholder tags, the output modifiers can be used with any MODx tag.

h3. Conditional output modifiers

{table-plus}



|| Modifier || Description || Example ||
| if, input | | |
| or \\ | Can be used to string output modifiers together with an &quot;OR&quot; relationship. \\ | |
| and \\ | Can be used to string output modifiers together with an &quot;AND&quot; relationship. \\ | |
| isequalto, isequal, equalto, equals, is, eq \\ | Compares to a passed value, and moves on if it&#39;s the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:isequalto=`5`:then=`There are 5 books\!`:else=`Not sure how many books`\]\] |
| notequalto, notequals, isnt, isnot, neq, ne \\ | Compares to a passed value, and moves on if it is not the same. Used with &quot;then&quot; and &quot;else&quot; \\ | \[\[+numbooks:notequalto=`5`:then=`Not sure how many books`:else=`There are 5 books\!`\]\] |
| greaterthanorequalto, equalorgreaterthen, ge, eg, isgte, gte \\ | Compares to a passed value, and moves on if it is greater than or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gte=`5`:then=`There are 5 books or more than 5 books`:else=`There are less than 5 books`\]\] \\ |
| isgreaterthan, greaterthan, isgt, gt \\ | Compares to a passed value, and moves on if it is greater than the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:gt=`5`:then=`There are more than 5 books`:else=`There are less than 5 books`\]\] |
| equaltoorlessthan, lessthanorequalto, el, le, islte, lte \\ | Compares to a passed value, and moves on if it is less then or equal to the value. Used with &quot;then&quot; and &quot;else&quot;. \\ | \[\[+numbooks:lte=`5`:then=`There are 5 or less than 5 books`:else=`There are more than 5 books`\]\] \\ |
| islowerthan, islessthan, lowerthan, lessthan, islt, lt \\ | Compares to a passed value, and moves on if it is less than the value. Used with &quot;then&quot; and &quot;else&quot;. | \[\[+numbooks:lte=`5`:then=`There are less than 5 books`:else=`There are more than 5 books`\]\] |
| hide \\ | Will check earlier conditions, and hide the element if the conditions were met. \\ | \[\[+numbooks:lt=`1`:hide\]\] \\ |
| show \\ | Will check earlier conditions, and show the element if the conditions were met. \\ | \[\[+numbooks:gt=`0`:show\]\] \\ |
| then \\ | Conditional usage. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`\]\] \\ |
| else \\ | Conditional usage, together with then. \\ | \[\[+numbooks:gt=`0`:then=`Now available\!`:else=`Sorry, currently sold out.`\]\] \\ |
| select \\ | | |
| memberof, ismember, mo \\ | Checks if the user is a member of the specified group(s). \\ | \[\[+modx.user.id:memberof=`Administrator`\]\] \\ |
{table-plus}

h3. String output modifiers

{table-plus}


|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase, lowercase, strtolower | Transforms strings to lowercase. Similar to PHP&#39;s [strtolower&amp;nbsp;|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase, uppercase, strtoupper | Transforms strings to uppercase. Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Transforms the first letter of a word to uppercase. Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Transforms the first letter of the string to uppercase.Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent, htmlentities | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; with flag ENT_QUOTES\\ | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values using regex and str_replace. Also escapes&amp;nbsp;\[, \] and ` | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| striptags, stripTags,notags,strip_tags | Accepts a value to indicate which tags to allow. Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags=`&lt;p&gt;`\]\] |
| len,length, strlen\\ | Counts the length of the passed string. Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse, strrev | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty, isempty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty,&amp;nbsp;\!empty, ifnotempty, isnotempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. See [Date Formats]. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. See [Date Formats]. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwdhttp://rtfm.modx.com/pages/editpage.action?pageId=18678207#`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

This assumes the&amp;nbsp;\[\[+userId\]\] placeholder has been set to a valid user ID. You could replace this with&amp;nbsp;\[\[+modx.user.id\]\] to use the current user logged in, or \[\[+createdby\]\] to get information from the user who created the resource.&amp;nbsp;

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}You will most likely want to call these uncached (see note about caching above) to prevent unexpected results.

{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:7;a:3:{s:2:"id";s:8:"35094758";s:3:"ver";s:1:"2";s:4:"code";s:9548:"{alias:Input and Output Filters}
\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

h2. Output Modifiers

The following table lists some of the existing modifiers and shows examples of their use. Although the examples below are placeholder tags, the output modifiers can be used with any MODx tag.

{table-plus}



|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags,strip_tags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. See [Date Formats]. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. See [Date Formats]. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwdhttp://rtfm.modx.com/pages/editpage.action?pageId=18678207#`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:8;a:3:{s:2:"id";s:8:"35094559";s:3:"ver";s:1:"2";s:4:"code";s:9507:"{alias:Input and Output Filters}
\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

h2. Output Modifiers

The following table lists some of the existing modifiers and shows examples of their use. Although the examples below are placeholder tags, the output modifiers can be used with any MODx tag.

{table-plus}


|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags,strip_tags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwdhttp://rtfm.modx.com/pages/editpage.action?pageId=18678207#`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:9;a:3:{s:2:"id";s:8:"33948179";s:3:"ver";s:1:"2";s:4:"code";s:9494:"{alias:Input and Output Filters}
\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

h2.Output Modifiers

The following table lists some of the existing modifiers and shows examples of their use. Although the examples below are placeholder tags, the output modifiers can be used with any MODx tag.

{table-plus}

|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwdhttp://rtfm.modx.com/pages/editpage.action?pageId=18678207#`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:10;a:3:{s:2:"id";s:8:"33948030";s:3:"ver";s:1:"1";s:4:"code";s:9461:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

h2.Output Modifiers

The following table lists some of the existing modifiers and shows examples of their use. Although the examples below are placeholder tags, the output modifiers can be used with any MODx tag.

{table-plus}

|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwdhttp://rtfm.modx.com/pages/editpage.action?pageId=18678207#`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:11;a:3:{s:2:"id";s:8:"33948028";s:3:"ver";s:1:"1";s:4:"code";s:9462:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

h2.Output Modifiers

The following table lists some of the existing modifiers and shows examples of their user. Although the examples below are placeholder tags, the output modifiers can be used with any MODx tag.

{table-plus}

|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwdhttp://rtfm.modx.com/pages/editpage.action?pageId=18678207#`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:12;a:3:{s:2:"id";s:8:"33948027";s:3:"ver";s:1:"1";s:4:"code";s:9493:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

h2.Output Modifiers

The following table lists some of the existing modifiers and shows examples of their user. Although the examples below are placeholder tags, the output modifiers can be used with any MODx tag.

The list of string modifiers:

{table-plus}

|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwdhttp://rtfm.modx.com/pages/editpage.action?pageId=18678207#`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:13;a:3:{s:2:"id";s:8:"33948025";s:3:"ver";s:1:"1";s:4:"code";s:9299:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

h2.Output Modifiers

The list of string modifiers:

{table-plus}

|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwdhttp://rtfm.modx.com/pages/editpage.action?pageId=18678207#`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:14;a:3:{s:2:"id";s:8:"33948023";s:3:"ver";s:1:"1";s:4:"code";s:9278:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filter

Currently the input filter processes tag calls in preparation for the output filter. It is generally used only internally by MODx.

h2. Output Filter

In Revolution, the Output Filter applies one or more of series of output modifiers, which behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax looks like this:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

{table-plus}

|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the output modifier.

Sometimes, output modifiers can be used on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Modifier with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the modifier:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Modifier

Also, [Snippets] can be used as custom modifiers. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using output modifiers instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo modifier. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwdhttp://rtfm.modx.com/pages/editpage.action?pageId=18678207#`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; modifier:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:15;a:3:{s:2:"id";s:8:"33948013";s:3:"ver";s:1:"1";s:4:"code";s:9073:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filters

Currently input filters process tag calls. More documentation to come.

h2. Output Filters

In Revolution, Output Filters behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax is like such:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

{table-plus}

|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrapcut | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrapcut=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the filter.

Sometimes, filters can be done on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Filter with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the filter:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`?
   &amp;tplFirst=`blogTpl`
   &amp;parents=`2,3,4,8`
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%`
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Filter

Also, [Snippets] can be used as custom modifiers and filters. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using filters instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo filter. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; filter:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:16;a:3:{s:2:"id";s:8:"33947976";s:3:"ver";s:1:"1";s:4:"code";s:9070:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filters

Currently input filters process tag calls. More documentation to come.

h2. Output Filters

In Revolution, Output Filters behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax is like such:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

{table-plus}
|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h3. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the filter.

Sometimes, filters can be done on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h3. Using an Output Filter with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the filter:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`? 
   &amp;tplFirst=`blogTpl` 
   &amp;parents=`2,3,4,8` 
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%` 
   &amp;includeTVs=`1`]]
{code}

h3. Creating a Custom Output Filter

Also, [Snippets] can be used as custom modifiers and filters. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using filters instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo filter. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; filter:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:17;a:3:{s:2:"id";s:8:"33227083";s:3:"ver";s:1:"1";s:4:"code";s:9070:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filters

Currently input filters process tag calls. More documentation to come.

h2. Output Filters

In Revolution, Output Filters behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax is like such:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

{table-plus}
|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h2. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the filter.

Sometimes, filters can be done on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using filters instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo filter. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; filter:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. Using an Output Filter with Tag Properties

If you have properties on the tag, you&#39;ll want to specify those *after* the filter:

{code}
[[!getResources:default=`Sorry - nothing matched your search.`? 
   &amp;tplFirst=`blogTpl` 
   &amp;parents=`2,3,4,8` 
   &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%` 
   &amp;includeTVs=`1`]]
{code}

h2. Creating a Custom Output Filter

Also, [Snippets] can be used as custom modifiers and filters. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:18;a:3:{s:2:"id";s:8:"33227082";s:3:"ver";s:1:"1";s:4:"code";s:9023:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filters

Currently input filters process tag calls. More documentation to come.

h2. Output Filters

In Revolution, Output Filters behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax is like such:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

{table-plus}
|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h2. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:default=`A default value!`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the filter.

Sometimes, filters can be done on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using filters instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo filter. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; filter:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. If the filter is not working - try changing the order


{code:lang=html|title=Placing the output filter first}[[!getResources:default=`Sorry - nothing matched your search.`? &amp;tplFirst=`blogTpl` &amp;parents=`2,3,4,8` &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%` &amp;includeTVs=`1`]]{code}

h2. Creating a Custom Output Filter

Also, [Snippets] can be used as custom modifiers and filters. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:19;a:3:{s:2:"id";s:8:"33227080";s:3:"ver";s:1:"1";s:4:"code";s:9018:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filters

Currently input filters process tag calls. More documentation to come.

h2. Output Filters

In Revolution, Output Filters behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax is like such:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

{table-plus}
|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h2. Caching

In general, any content in a placeholder that you think *might change dynamically* should be uncached. For example:

{code}[[+placeholder:empty=`I&#39;m empty`]]{code}

This means that this could *sometimes* be empty, and sometimes not. Why would you ever want that cached? That would eliminate the point of the filter.

Sometimes, filters can be done on a cached placeholder - but only if you&#39;re calling the Snippet that sets them cached as well. Otherwise, you&#39;re performing an illogical maneuver - trying to cache statically something that was never meant to be static.

In general, the rule is: If you set a placeholder in an uncached Snippet, the placeholder needs to be uncached as well if you expect the content of the placeholder to differ.

h2. Examples

A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using filters instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo filter. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; filter:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. If the filter is not working - try changing the order


{code:lang=html|title=Placing the output filter first}[[!getResources:default=`Sorry - nothing matched your search.`? &amp;tplFirst=`blogTpl` &amp;parents=`2,3,4,8` &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%` &amp;includeTVs=`1`]]{code}

h2. Creating a Custom Output Filter

Also, [Snippets] can be used as custom modifiers and filters. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:20;a:3:{s:2:"id";s:8:"33227079";s:3:"ver";s:1:"9";s:4:"code";s:8252:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filters

Currently input filters process tag calls. More documentation to come.

h2. Output Filters

In Revolution, Output Filters behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax is like such:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

{table-plus}




|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h2. Examples


A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using filters instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo filter. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; filter:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. If the filter is not working - try changing the order


{code:lang=html|title=Placing the output filter first}[[!getResources:default=`Sorry - nothing matched your search.`? &amp;tplFirst=`blogTpl` &amp;parents=`2,3,4,8` &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%` &amp;includeTVs=`1`]]{code}

h2. Creating a Custom Output Filter

Also, [Snippets] can be used as custom modifiers and filters. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:21;a:3:{s:2:"id";s:8:"33227003";s:3:"ver";s:1:"8";s:4:"code";s:8226:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filters

Currently input filters process tag calls. More documentation to come.

h2. Output Filters

In Revolution, Output Filters behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax is like such:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

{table-plus}



|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h2. Examples


A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using filters instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo filter. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; filter:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. If the filter is not working


{code:lang=html|title=Placing the output filter first}[[!getResources:default=`Sorry - nothing matched your search.`? &amp;tplFirst=`blogTpl` &amp;parents=`2,3,4,8` &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%` &amp;includeTVs=`1`]]{code}

h2. Creating a Custom Output Filter

Also, [Snippets] can be used as custom modifiers and filters. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:22;a:3:{s:2:"id";s:8:"33226852";s:3:"ver";s:1:"7";s:4:"code";s:8280:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filters

Currently input filters process tag calls. More documentation to come.

h2. Output Filters

In Revolution, Output Filters behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax is like such:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

{table-plus}


|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
\[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
\[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h2. Examples


A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using filters instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo filter. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; filter:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h2. If the filter is not working, you may want to try placing it before the parameters:


{code:lang=html|title=Placing the output filter first}[[!getResources:default=`Sorry - nothing matched your search.`? &amp;tplFirst=`blogTpl` &amp;parents=`2,3,4,8` &amp;tvFilters=`blog_tags==%[[!tag:htmlent]]%` &amp;includeTVs=`1`]]{code}

h3. Creating a Custom Output Filter

Also, [Snippets] can be used as custom modifiers and filters. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:23;a:3:{s:2:"id";s:8:"33226850";s:3:"ver";s:1:"6";s:4:"code";s:7950:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filters

Currently input filters process tag calls. More documentation to come.

h2. Output Filters

In Revolution, Output Filters behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax is like such:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

{table-plus}

|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
 \[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
 \[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h2. Examples


A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using filters instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo filter. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; filter:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

h3. Creating a Custom Output Filter

Also, [Snippets] can be used as custom modifiers and filters. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:24;a:3:{s:2:"id";s:8:"33226764";s:3:"ver";s:1:"5";s:4:"code";s:7913:"\\

{toc}

h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filters

Currently input filters process tag calls. More documentation to come.

h2. Output Filters

In Revolution, Output Filters behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax is like such:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

{table-plus}

|| Modifier || Description || Example ||
| cat | Appends the option&#39;s value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot; | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values | \[\[+email:escape\]\] |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space | \[\[+textdocument:strip\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\] |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\] |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position. | \[\[+bodytext:wordwrap=`80`\]\] |
| limit | Limits a string to a certain number of characters. Defaults to 100. | \[\[+description:limit=`50`\]\] |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100. | \[\[+description:ellipsis=`50`\]\] |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) | |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] \\
 \[\[+blackjack:add=`21`\]\] |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] \\
 \[\[+moneys:subtract=`100`\]\] |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\] |
| divide,div | Returns input divided by option (default: /2) Does not accept 0. | \[\[+rating:div=`4`\]\] |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\] |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\] |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]\!`\]\] |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\] |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format. | \[\[+birthyear:date=`%Y`\]\] |
| strtotime | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php]. | \[\[+password:md5\]\] |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab. | \[\[+userId:userinfo=`username`\]\] |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h2. Examples


A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using filters instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo filter. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; filter:
{code}
[[+modx.user.id]] - Prints the ID
[[+modx.user.username]] - Prints the username
{code}
{note}

Also, [Snippets] can be used as custom modifiers and filters. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value || Example Result ||
| input | The element&#39;s value. | The value of \[\[+file\]\] |
| options | Any value passed to the modifier. | &#39;notitle&#39; |
| token | The type of the parent element. | + (the token on `file`) |
| name | The name of the parent element. | file |
| tag | The complete parent tag. | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:25;a:3:{s:2:"id";s:8:"24510468";s:3:"ver";s:1:"4";s:4:"code";s:7944:"\\

{toc}
h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filters

Currently input filters process tag calls. More documentation to come.

h2. Output Filters

In Revolution, Output Filters behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax is like such:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

{table-plus}
|| Modifier || Description || Example ||
| cat | Appends the options value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot;  | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values  | \[\[+email:escape\]\]  |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space  | \[\[+textdocument:strip\]\]  |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\]  |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\]  |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\]  |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position.  | \[\[+bodytext:wordwrap=`80`\]\]  |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position.  | \[\[+bodytext:wordwrap=`80`\]\]  |
| limit | Limits a string to a certain number of characters. Defaults to 100.  | \[\[+description:limit=`50`\]\]  |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100.  | \[\[+description:ellipsis=`50`\]\]  |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) |  |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] 
\[\[+blackjack:add=`21`\]\]  |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] 
\[\[+moneys:subtract=`100`\]\]  |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\]  |
| divide,div | Returns input divided by option (default: /2) Does not accept 0.  | \[\[+rating:div=`4`\]\]  |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\]  |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\]  |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]!`\]\]  |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\]  |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format.  | \[\[+birthyear:date=`%Y`\]\]  |
| strtotime  | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\]  |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php].  | \[\[+password:md5\]\]  |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab.  | \[\[+userId:userinfo=`username`\]\]  |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h2. Examples


A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using filters instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo filter. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[+userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; filter:
{code}
[[+modx.user.id]] - Prints the ID  
[[+modx.user.username]] - Prints the username 
{code}
{note}

Also, [Snippets] can be used as custom modifiers and filters. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value  || Example Result ||
| input | The element&#39;s value.  | The value of \[\[+file\]\]  |
| options | Any value passed to the modifier.  | &#39;notitle&#39; |
| token | The type of the parent element.  | + (the token on `file`)  |
| name | The name of the parent element.  | file |
| tag | The complete parent tag.  | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:26;a:3:{s:2:"id";s:8:"21659688";s:3:"ver";s:1:"3";s:4:"code";s:7945:"\\

{toc}
h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filters

Currently input filters process tag calls. More documentation to come.

h2. Output Filters

In Revolution, Output Filters behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax is like such:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

{table-plus}
|| Modifier || Description || Example ||
| cat | Appends the options value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot;  | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values  | \[\[+email:escape\]\]  |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space  | \[\[+textdocument:strip\]\]  |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\]  |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\]  |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\]  |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position.  | \[\[+bodytext:wordwrap=`80`\]\]  |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position.  | \[\[+bodytext:wordwrap=`80`\]\]  |
| limit | Limits a string to a certain number of characters. Defaults to 100.  | \[\[+description:limit=`50`\]\]  |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100.  | \[\[+description:ellipsis=`50`\]\]  |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) |  |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] 
\[\[+blackjack:add=`21`\]\]  |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] 
\[\[+moneys:subtract=`100`\]\]  |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\]  |
| divide,div | Returns input divided by option (default: /2) Does not accept 0.  | \[\[+rating:div=`4`\]\]  |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\]  |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\]  |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]!`\]\]  |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\]  |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format.  | \[\[+birthyear:date=`%Y`\]\]  |
| strtotime  | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\]  |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php].  | \[\[+password:md5\]\]  |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab.  | \[\[+userId:userinfo=`username`\]\]  |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | \[\[+mystring:urlencode\]\] |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | \[\[+myparam:urldecode\]\] |
{table-plus}

h2. Examples


A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using filters instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo filter. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[++userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; filter:
{code}
[[+modx.user.id]] - Prints the ID  
[[+modx.user.username]] - Prints the username 
{code}
{note}

Also, [Snippets] can be used as custom modifiers and filters. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value  || Example Result ||
| input | The element&#39;s value.  | The value of \[\[+file\]\]  |
| options | Any value passed to the modifier.  | &#39;notitle&#39; |
| token | The type of the parent element.  | + (the token on `file`)  |
| name | The name of the parent element.  | file |
| tag | The complete parent tag.  | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:27;a:3:{s:2:"id";s:8:"20119867";s:3:"ver";s:1:"2";s:4:"code";s:7890:"\\

{toc}
h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filters

Currently input filters process tag calls. More documentation to come.

h2. Output Filters

In Revolution, Output Filters behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax is like such:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

{table-plus}
|| Modifier || Description || Example ||
| cat | Appends the options value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucwords | Similar to PHP&#39;s [ucwords|http://www.php.net/manual/en/function.ucwords.php] | \[\[+title:ucwords\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot;  | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values  | \[\[+email:escape\]\]  |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space  | \[\[+textdocument:strip\]\]  |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |
| stripTags,notags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\]  |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\]  |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\]  |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position.  | \[\[+bodytext:wordwrap=`80`\]\]  |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php], with word cutting enabled. Takes optional value to set wordwrap position.  | \[\[+bodytext:wordwrap=`80`\]\]  |
| limit | Limits a string to a certain number of characters. Defaults to 100.  | \[\[+description:limit=`50`\]\]  |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100.  | \[\[+description:ellipsis=`50`\]\]  |
| tag | Displays the raw element without the :tag. Useful for documentation. | \[\[+showThis:tag\]\] |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) |  |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] 
\[\[+blackjack:add=`21`\]\]  |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] 
\[\[+moneys:subtract=`100`\]\]  |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\]  |
| divide,div | Returns input divided by option (default: /2) Does not accept 0.  | \[\[+rating:div=`4`\]\]  |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\]  |
| ifempty,default,empty | Returns the input value if empty | \[\[+name:default=`anonymous`\]\]  |
| notempty | Returns the input value if not empty | \[\[+name:notempty=`Hello \[\[+name\]\]!`\]\]  |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\]  |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format.  | \[\[+birthyear:date=`%Y`\]\]  |
| strtotime  | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime]. Takes in a date. | \[\[+thetime:strtotime\]\]  |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered. Takes in a date. | \[\[+createdon:fuzzydate\]\] |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago. Takes in a date. | \[\[+createdon:ago\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php].  | \[\[+password:md5\]\]  |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab.  | \[\[+userId:userinfo=`username`\]\]  |
| isloggedin | Returns true if user is authenticated in this context. | |
| isnotloggedin | Returns true if user is not authenticated in this context. | |
| urlencode | Similar to PHP&#39;s [urlencode|http://www.php.net/manual/en/function.urlencode.php] | |
| urldecode | Similar to PHP&#39;s [urldecode|http://www.php.net/manual/en/function.urldecode.php] | |
{table-plus}

h2. Examples


A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using filters instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo filter. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[++userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; filter:
{code}
[[+modx.user.id]] - Prints the ID  
[[+modx.user.username]] - Prints the username 
{code}
{note}

Also, [Snippets] can be used as custom modifiers and filters. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value  || Example Result ||
| input | The element&#39;s value.  | The value of \[\[+file\]\]  |
| options | Any value passed to the modifier.  | &#39;notitle&#39; |
| token | The type of the parent element.  | + (the token on `file`)  |
| name | The name of the parent element.  | file |
| tag | The complete parent tag.  | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}i:28;a:3:{s:2:"id";s:8:"20119866";s:3:"ver";s:1:"1";s:4:"code";s:6905:"\\

{toc}
h2. What are Filters?

Filters in Revolution allow you to manipulate the way data is presented or parsed in a tag.  They allow you to modify values from inside your templates.

h2. Input Filters

Currently input filters process tag calls. More documentation to come.

h2. Output Filters

In Revolution, Output Filters behave similarly to PHx calls in MODx Evolution - except they&#39;re built into the core. The syntax is like such:

{code}[[element:modifier=`value`]]{code}

They can also be chained (executed left to right):

{code}[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]{code}

The list of string modifiers:

|| Modifier || Description || Example ||
| cat | Appends the options value (if not empty) to the input value | \[\[+numbooks:cat=` books`\]\] |
| lcase | Similar to PHP&#39;s [strtolower|http://www.php.net/manual/en/function.strtolower.php] | \[\[+title:lcase\]\] |
| ucase | Similar to PHP&#39;s [strtoupper|http://www.php.net/manual/en/function.strtoupper.php] | \[\[+headline:ucase\]\] |
| ucfirst | Similar to PHP&#39;s [ucfirst|http://www.php.net/manual/en/function.ucfirst.php] | \[\[+name:ucfirst\]\] |
| htmlent | Similar to PHP&#39;s [htmlentities|http://www.php.net/manual/en/function.htmlentities.php]. Uses the current value the system setting &quot;modx_charset&quot;  | \[\[+email:htmlent\]\] |
| esc,escape | Safely escapes character values  | \[\[+email:escape\]\]  |
| strip | Replaces all linebreaks, tabs and multiple spaces with just one space  | \[\[+textdocument:strip\]\]  |
| stripTags | Similar to PHP&#39;s [strip_tags|http://www.php.net/manual/en/function.strip_tags.php] | \[\[+code:strip_tags\]\]  |
| len,length | Similar to PHP&#39;s [strlen|http://www.php.net/manual/en/function.strlen.php] | \[\[+longstring:strlen\]\]  |
| reverse | Similar to PHP&#39;s [strrev|http://www.php.net/manual/en/function.strrev.php] | \[\[+mirrortext:reverse\]\]  |
| wordwrap | Similar to PHP&#39;s [wordwrap|http://www.php.net/manual/en/function.wordwrap.php]. Takes optional value to set wordwrap position.  | \[\[+bodytext:wordwrap=`80`\]\]  |
| limit | Limits a string to a certain number of characters. Defaults to 100.  | \[\[+description:limit=`50`\]\]  |
| ellipsis | Adds an ellipsis to and truncates a string if it&#39;s longer than a certain number of characters. Defaults to 100.  | \[\[+description:ellipsis=`50`\]\]  |
| math | Returns the result of an advanced calculation (expensive on processor. not recommended) |  |
| add,increment,incr | Returns input incremented by option (default: \+1) | \[\[+downloads:incr\]\] 
\[\[+blackjack:add=`21`\]\]  |
| subtract,decrement,decr | Returns input decremented by option (default: \-1) | \[\[+countdown:decr\]\] 
\[\[+moneys:subtract=`100`\]\]  |
| multiply,mpy | Returns input multiplied by option (default: \*2) | \[\[+trifecta:mpy=`3`\]  |
| divide,div | Returns input divided by option (default: /2) Does not accept 0.  | \[\[+rating:div=`4`\]\]  |
| modulus,mod | Returns the option modulus on input (default: %2, returns 0 or 1) | \[\[+number:mod\]\]  |
| ifempty,default | Returns the input value if empty | \[\[+name:default=`anonymous`\]\]  |
| nl2br | Similar to PHP&#39;s [nl2br|http://www.php.net/manual/en/function.nl2br.php] | \[\[+textfile:nl2br\]\]  |
| date | Similar to PHP&#39;s [strftime|http://www.php.net/manual/en/function.strftime.php]. Value is format.  | \[\[+birthyear:date=`%Y`\]\]  |
| strtotime  | Similar to PHP&#39;s [strtotime|http://www.php.net/strtotime].  | \[\[+thetime:strtotime\]\]  |
| ago | Returns a pretty date format in seconds, minutes, weeks or months ago | \[\[+createdon:ago\]\] |
| fuzzydate | Returns a pretty date format with yesterday and today being filtered | \[\[+createdon:fuzzydate\]\] |
| md5 | Similar to PHP&#39;s [md5|http://www.php.net/manual/en/function.md5.php].  | \[\[+password:md5\]\]  |
| userinfo | Returns the requested user data. The element must be a modUser ID. The value field is the column to grab.  | \[\[+userId:userinfo=`username`\]\]  |
| cdata | Wraps the text with CDATA tags | \[\[+content:cdata\]\] |
| stripString | Strips string of specified value | \[\[+name:stripString=`Mr.`\]\] |
| replace | Replaces one value with another | \[\[+pagetitle:replace=`Mr.==Mrs.`\]\] |

h2. Examples


A good example of chaining would be to format a date string to another format, like so:
{code}[[+mydate:strtotime:date=`%Y-%m-%d`]]
{code}Directly accessing the modx_user_attributes table in the database using filters instead of a [Snippet|Snippets] can be accomplished simply by utilizing the userinfo filter. Select the appropriate column from the table and link to it, like so:
{code}
User Internal Key: [[+userId:userinfo=`internalKey`]]&lt;br /&gt;
User name: [[+userId:userinfo=`username`]]&lt;br /&gt;
Full Name:[[+userId:userinfo=`fullname`]]&lt;br /&gt;
Role:  [[+userId:userinfo=`role`]]&lt;br /&gt;
E-mail: [[++userId:userinfo=`email`]]&lt;br /&gt;
Phone: [[+userId:userinfo=`phone`]]&lt;br /&gt;
Mobile Phone: [[+userId:userinfo=`mobilephone`]]&lt;br /&gt;
Fax: [[+userId:userinfo=`fax`]]&lt;br /&gt;
Date of birth: [[+userId:userinfo=`dob`:date=`%Y-%m-%d`]]&lt;br /&gt;
Gender[[+userId:userinfo=`gender`]]&lt;br /&gt;
Country: [[+userId:userinfo=`country`]]&lt;br /&gt;
State: [[+userId:userinfo=`state`]]&lt;br /&gt;
Zip Code: [[+userId:userinfo=`zip`]]&lt;br /&gt;
Photo: [[+userId:userinfo=`photo`]]&lt;br /&gt;
Comment: [[+userId:userinfo=`comment`]]&lt;br /&gt;
Password: [[+userId:userinfo=`password`]]&lt;br /&gt;
Cache Password: [[+userId:userinfo=`cachepwd`]]&lt;br /&gt;
Last Login: [[+userId:userinfo=`lastlogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
The Login:[[+userId:userinfo=`thislogin`:date=`%Y-%m-%d`]]&lt;br /&gt;
Number of Logins: [[+userId:userinfo=`logincount`]]
{code}

{note}Note that the user ID and username is already available by default in MODx, so you dont need to use the &quot;userinfo&quot; filter:
{code}
[[+modx.user.id]] - Prints the ID  
[[+modx.user.username]] - Prints the username 
{code}
{note}

Also, [Snippets] can be used as custom modifiers and filters. Simply put the [Snippet|Snippets] name instead of the modifier. Example with a snippet named &#39;makeDownloadLink&#39;:
{code}[[+file:makeDownloadLink=`notitle`]]
{code}This will pass these properties to the snippet:
|| Param || Value  || Example Result ||
| input | The element&#39;s value.  | The value of \[\[+file\]\]  |
| options | Any value passed to the modifier.  | &#39;notitle&#39; |
| token | The type of the parent element.  | + (the token on `file`)  |
| name | The name of the parent element.  | file |
| tag | The complete parent tag.  | \[\[\+[file:makeDownloadLink=]`notitle`\]\] |
And then the return value of that call would be whatever the snippet returns.


h2. See Also

* [Properties and Property Sets]
* [Templates]
* [Template Variables]
* [Snippets]

{scrollbar}";}}}