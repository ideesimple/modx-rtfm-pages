a:5:{s:2:"id";s:8:"18678331";s:4:"info";a:4:{s:6:"Title:";s:17:"Actions and Menus";s:7:"Author:";s:15:"Shaun McCormick";s:16:"Last Changed by:";s:15:"Shaun McCormick";s:12:"Wiki Markup:";s:32:"[revolution20:Actions and Menus]";}s:6:"parent";s:8:"18678125";s:6:"source";s:2454:"\\

MODx Revolution introduces an entirely new program structure for its core. The manager is also built on what are called _controllers_ and _templates_, which use AJAX processing to send data to _connectors_ that access _processors_.

The controllers are simply PHP files that load the correct Smarty template to display, and fetch any pre-render data for the template. Revolution abstracts these controllers into the DB as modAction&#39;s, allowing 3rd party developers to easily create custom manager pages that &#39;hook&#39; into the current MODx system _without modifying the core_.

modAction&#39;s require a controller and a template to exist, that must be found in the manager/controllers and manager/templates directories. They have a few certain parameters that are worth noting:
* *Controller* \- This points to the controller file. If the file is an index.php, you can leave that off and MODx will try and find it through a smart search.
* *Load Headers* \- if checked, this will load the MODx header and footer for the internal page. If you are wanting just a blank page for the manager page, leave this unchecked.
* *Language Topics* \- Language Topics are simply separations of language areas that allow for quicker i18n access. They can be found in the core/lexicon/en (or fr,de,etc) directory, and new topics can easily be created simply by using the Lexicon Management section.

For example, 3rd party devs might want to create a Lexicon Topic named &#39;buttons&#39; for TinyMCE, which would reference the topic in core/components/tinymce/lexicon/en/buttons.inc.php. They can simply either A) use a build script to install the lexicon via a transport package, or B) have users import the lexicon topics using the Import Lexicon utility in Lexicon Management.

You can then load the topic via:
{code}
$modx-&gt;lexicon-&gt;load(&#39;tinymce:buttons&#39;);
{code}
modAction&#39;s are also easily hooked to modMenu&#39;s, which are abstract representations of the top menubar in the manager. Again, this lets 3rd party developers easily and quickly develop custom menu implementations for their components - or lets users rearrange the top menu.

These can all be managed via the Actions panel, which is found under the Tools menu.&amp;nbsp;

{note}Any changes to the order of &#39;core&#39; menu items will be reverted during Revolution upgrades.{note}

h2. Related Pages

* [Custom Manager Pages]
* [Internationalization]

{scrollbar}";s:8:"versions";a:1:{i:0;a:3:{s:2:"id";s:8:"18678331";s:3:"ver";s:1:"1";s:4:"code";s:2454:"\\

MODx Revolution introduces an entirely new program structure for its core. The manager is also built on what are called _controllers_ and _templates_, which use AJAX processing to send data to _connectors_ that access _processors_.

The controllers are simply PHP files that load the correct Smarty template to display, and fetch any pre-render data for the template. Revolution abstracts these controllers into the DB as modAction&#39;s, allowing 3rd party developers to easily create custom manager pages that &#39;hook&#39; into the current MODx system _without modifying the core_.

modAction&#39;s require a controller and a template to exist, that must be found in the manager/controllers and manager/templates directories. They have a few certain parameters that are worth noting:
* *Controller* \- This points to the controller file. If the file is an index.php, you can leave that off and MODx will try and find it through a smart search.
* *Load Headers* \- if checked, this will load the MODx header and footer for the internal page. If you are wanting just a blank page for the manager page, leave this unchecked.
* *Language Topics* \- Language Topics are simply separations of language areas that allow for quicker i18n access. They can be found in the core/lexicon/en (or fr,de,etc) directory, and new topics can easily be created simply by using the Lexicon Management section.

For example, 3rd party devs might want to create a Lexicon Topic named &#39;buttons&#39; for TinyMCE, which would reference the topic in core/components/tinymce/lexicon/en/buttons.inc.php. They can simply either A) use a build script to install the lexicon via a transport package, or B) have users import the lexicon topics using the Import Lexicon utility in Lexicon Management.

You can then load the topic via:
{code}
$modx-&gt;lexicon-&gt;load(&#39;tinymce:buttons&#39;);
{code}
modAction&#39;s are also easily hooked to modMenu&#39;s, which are abstract representations of the top menubar in the manager. Again, this lets 3rd party developers easily and quickly develop custom menu implementations for their components - or lets users rearrange the top menu.

These can all be managed via the Actions panel, which is found under the Tools menu.&amp;nbsp;

{note}Any changes to the order of &#39;core&#39; menu items will be reverted during Revolution upgrades.{note}

h2. Related Pages

* [Custom Manager Pages]
* [Internationalization]

{scrollbar}";}}}